java.lang.NullPointerException: Cannot invoke "org.springframework.web.reactive.function.client.WebClient$RequestBodyUriSpec.uri(java.net.URI)" because the return value of "org.springframework.web.reactive.function.client.WebClient.post()" is null

	at uk.co.allianz.rap.lc.service.LossControlServiceImplTest11.testInspectionsPost(LossControlServiceImplTest11.java:47)



// ...
import java.net.URI;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;
// ...

class LossControlServiceImplTest11 {

    @Mock
    private WebClient webClient;

    @InjectMocks
    private LossControlServiceImpl lossControlService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testInspectionsPost() throws URISyntaxException {
        ImportInspectionsRequest importInspectionsRequest = new ImportInspectionsRequest();
        String bearerToken = "sampleBearerToken";

        ImportInspectionResponse expectedResponse = new ImportInspectionResponse();
        // Initialize expectedResponse with the expected data

        // Mock WebClient response
        when(webClient.post()
                .uri(eq(new URI("https://example.com/api/endpoint")))  // Replace with your expected URI
                .headers(any())
                .contentType(MediaType.APPLICATION_JSON)
                .accept(MediaType.APPLICATION_JSON)
                .bodyValue(importInspectionsRequest)
                .retrieve()
                .bodyToMono(ImportInspectionResponse.class))
                .thenReturn(Mono.just(expectedResponse));

        ImportInspectionResponse result = lossControlService.inspectionsPost(importInspectionsRequest, bearerToken);

        // Verify the WebClient interaction
        verify(webClient, times(1)).post();
        // Add more verification if necessary

        // Verify the expected response
        assertEquals(expectedResponse, result, "The actual response does not match the expected response.");
    }
}








// ...
import java.net.URI;
import static org.mockito.ArgumentMatchers.eq;
// ...

class LossControlServiceImplTest11 {

    @Mock
    private WebClient webClient;

    @InjectMocks
    private LossControlServiceImpl lossControlService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testInspectionsPost() {
        ImportInspectionsRequest importInspectionsRequest = new ImportInspectionsRequest();
        String bearerToken = "sampleBearerToken";

        ImportInspectionResponse expectedResponse = new ImportInspectionResponse();
        // Initialize expectedResponse with the expected data

        // Mock WebClient response
        when(webClient.post()
                .uri(eq(new URI("your_expected_uri_here")))
                .headers(any())
                .contentType(MediaType.APPLICATION_JSON)
                .accept(MediaType.APPLICATION_JSON)
                .bodyValue(importInspectionsRequest)
                .retrieve()
                .bodyToMono(ImportInspectionResponse.class))
                .thenReturn(Mono.just(expectedResponse));

        ImportInspectionResponse result = lossControlService.inspectionsPost(importInspectionsRequest, bearerToken);

        // Verify the WebClient interaction
        verify(webClient, times(1)).post();
        // Add more verification if necessary

        // Verify the expected response
        assertEquals(expectedResponse, result, "The actual response does not match the expected response.");
    }
}

////
package uk.co.allianz.rap.lc.service;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;
import uk.co.allianz.rap.lc.model.request.importclient.ImportClientRequest;
import uk.co.allianz.rap.lc.model.request.importinspections.ImportInspectionsRequest;
import uk.co.allianz.rap.lc.model.response.importclient.ImportClientResponse;
import uk.co.allianz.rap.lc.model.response.importinspections.ImportInspectionResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

class LossControlServiceImplTest10 {

    @Mock
    private WebClient webClient;

    @InjectMocks
    private LossControlServiceImpl lossControlService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testInspectionsPost() {
        ImportInspectionsRequest importInspectionsRequest = new ImportInspectionsRequest();
        String bearerToken = "sampleBearerToken";

        ImportInspectionResponse expectedResponse = new ImportInspectionResponse();
        // Set up your expectedResponse accordingly

        when(webClient.post()
                .uri(any())
                .headers(any())
                .accept(any())
                .contentType(any())
                .body(any(Mono.class), eq(ImportInspectionResponse.class))
                .retrieve()
                .bodyToMono(ImportInspectionResponse.class))
                .thenReturn(Mono.just(expectedResponse));

        ImportInspectionResponse result = lossControlService.inspectionsPost(importInspectionsRequest, bearerToken);

        assertEquals(expectedResponse, result);

        // Verify the WebClient interaction
        verify(webClient, times(1)).post();
        // Add more verification if needed
    }
}


//
package uk.co.allianz.rap.lc.service;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;
import uk.co.allianz.rap.lc.model.request.importclient.ImportClientRequest;
import uk.co.allianz.rap.lc.model.request.importinspections.ImportInspectionsRequest;
import uk.co.allianz.rap.lc.model.response.importclient.ImportClientResponse;
import uk.co.allianz.rap.lc.model.response.importinspections.ImportInspectionResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

class LossControlServiceImplTest11 {

    @Mock
    private WebClient webClient;

    @InjectMocks
    private LossControlServiceImpl lossControlService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testInspectionsPost() {
        ImportInspectionsRequest importInspectionsRequest = new ImportInspectionsRequest();
        String bearerToken = "sampleBearerToken";

        ImportInspectionResponse expectedResponse = new ImportInspectionResponse();
        // Initialize expectedResponse with the expected data

        // Mock WebClient response
        when(webClient.post()
                .uri(any())
                .headers(any())
                .contentType(MediaType.APPLICATION_JSON)
                .accept(MediaType.APPLICATION_JSON)
                .bodyValue(importInspectionsRequest)
                .retrieve()
                .bodyToMono(ImportInspectionResponse.class))
                .thenReturn(Mono.just(expectedResponse));

        ImportInspectionResponse result = lossControlService.inspectionsPost(importInspectionsRequest, bearerToken);

        // Verify the WebClient interaction
        verify(webClient, times(1)).post();
        // Add more verification if necessary

        // Verify the expected response
        assertEquals(expectedResponse, result, "The actual response does not match the expected response.");
    }
}


//
package uk.co.allianz.rap.lc.service;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;
import uk.co.allianz.rap.lc.model.request.importinspections.ImportInspectionsRequest;
import uk.co.allianz.rap.lc.model.response.importinspections.ImportInspectionResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

class LossControlServiceImplTest12 {

    @Mock
    private WebClient webClient;

    @InjectMocks
    private LossControlServiceImpl lossControlService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testInspectionsPost() {
        ImportInspectionsRequest importInspectionsRequest = new ImportInspectionsRequest();
        String bearerToken = "sampleBearerToken";

        ImportInspectionResponse expectedResponse = new ImportInspectionResponse();
        // Set up your expected response as needed
        
        // Mock WebClient behavior
        when(webClient.post())
                .thenReturn(WebClient.builder().build()
                        .post()
                        .uri("/your/endpoint/here")
                        .header(HttpHeaders.AUTHORIZATION, "Bearer " + bearerToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .accept(MediaType.APPLICATION_JSON)
                        .bodyValue(importInspectionsRequest)
                        .retrieve()
                        .bodyToMono(ImportInspectionResponse.class));

        ImportInspectionResponse result = lossControlService.inspectionsPost(importInspectionsRequest, bearerToken);

        // Verify that the WebClient.post() method was called
        verify(webClient).post();

        // You might want to verify other WebClient method calls and headers here

        assertEquals(expectedResponse, result);
    }
}

//
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

class LossControlServiceImplTest13 {

    @Mock
    private WebClient webClient;

    @InjectMocks
    private LossControlServiceImpl lossControlService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testInspectionsPost() {
        ImportInspectionsRequest importInspectionsRequest = new ImportInspectionsRequest();
        String bearerToken = "sampleBearerToken";

        ImportInspectionResponse expectedResponse = new ImportInspectionResponse();
        // Set up your expected response as needed

        // Mock WebClient behavior
        when(webClient.post())
            .thenReturn(WebClient.RequestBodySpec.class);
        when(WebClient.RequestBodySpec.uri(any(String.class)))
            .thenReturn(WebClient.RequestBodyUriSpec.class);
        when(WebClient.RequestBodyUriSpec.header(any(String.class), any()))
            .thenReturn(WebClient.RequestBodyUriSpec.class);
        when(WebClient.RequestBodyUriSpec.contentType(any(MediaType.class)))
            .thenReturn(WebClient.RequestBodySpec.class);
        when(WebClient.RequestBodySpec.body(any(Mono.class), any(Class.class)))
            .thenReturn(Mono.just(expectedResponse));

        ImportInspectionResponse result = lossControlService.inspectionsPost(importInspectionsRequest, bearerToken);

        assertEquals(expectedResponse, result);
    }
}

///
package uk.co.allianz.rap.lc.service;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;
import uk.co.allianz.rap.lc.model.request.importclient.ImportClientRequest;
import uk.co.allianz.rap.lc.model.request.importinspections.ImportInspectionsRequest;
import uk.co.allianz.rap.lc.model.response.importclient.ImportClientResponse;
import uk.co.allianz.rap.lc.model.response.importinspections.ImportInspectionResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

class LossControlServiceImplTest14 {

    @Mock
    private WebClient webClient;

    @InjectMocks
    private LossControlServiceImpl lossControlService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testInspectionsPost() {
        ImportInspectionsRequest importInspectionsRequest = new ImportInspectionsRequest();
        String bearerToken = "sampleBearerToken";

        ImportInspectionResponse expectedResponse = new ImportInspectionResponse();
        // Similar mocking process as the previous test

        ImportInspectionResponse result = lossControlService.inspectionsPost(importInspectionsRequest, bearerToken);

        // Similar verification process as the previous test

        assertEquals(expectedResponse, result);
    }

ImportInspectionResponse result = lossControlService.inspectionsPost(importInspectionsRequest, bearerToken);

/home/rushabh.chatarkar/.jdks/corretto-17.0.7/bin/java -ea -Dorg.springframework.restdocs.outputDir=/home/rushabh.chatarkar/TokenTestCases/loss-control-service/target/generated-snippets -Dorg.springframework.restdocs.javadocJsonDir=/home/rushabh.chatarkar/TokenTestCases/loss-control-service/target/generated-javadoc-json -Didea.test.cyclic.buffer.size=1048576 -javaagent:/snap/intellij-idea-community/451/lib/idea_rt.jar=43051:/snap/intellij-idea-community/451/bin -Dfile.encoding=UTF-8 -classpath /snap/intellij-idea-community/451/lib/idea_rt.jar:/snap/intellij-idea-community/451/plugins/junit/lib/junit5-rt.jar:/snap/intellij-idea-community/451/plugins/junit/lib/junit-rt.jar:/home/rushabh.chatarkar/TokenTestCases/loss-control-service/target/test-classes:/home/rushabh.chatarkar/TokenTestCases/loss-control-service/target/classes:/home/rushabh.chatarkar/.m2/repository/com/mikesamuel/json-sanitizer/1.2.0/json-sanitizer-1.2.0.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/boot/spring-boot-starter-webflux/3.1.0/spring-boot-starter-webflux-3.1.0.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/boot/spring-boot-starter/3.1.0/spring-boot-starter-3.1.0.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/boot/spring-boot/3.1.0/spring-boot-3.1.0.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.1.0/spring-boot-autoconfigure-3.1.0.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.1.0/spring-boot-starter-logging-3.1.0.jar:/home/rushabh.chatarkar/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.20.0/log4j-to-slf4j-2.20.0.jar:/home/rushabh.chatarkar/.m2/repository/org/apache/logging/log4j/log4j-api/2.20.0/log4j-api-2.20.0.jar:/home/rushabh.chatarkar/.m2/repository/org/slf4j/jul-to-slf4j/2.0.7/jul-to-slf4j-2.0.7.jar:/home/rushabh.chatarkar/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.1.0/spring-boot-starter-json-3.1.0.jar:/home/rushabh.chatarkar/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.15.0/jackson-datatype-jdk8-2.15.0.jar:/home/rushabh.chatarkar/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.15.0/jackson-module-parameter-names-2.15.0.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/boot/spring-boot-starter-reactor-netty/3.1.0/spring-boot-starter-reactor-netty-3.1.0.jar:/home/rushabh.chatarkar/.m2/repository/io/projectreactor/netty/reactor-netty-http/1.1.7/reactor-netty-http-1.1.7.jar:/home/rushabh.chatarkar/.m2/repository/io/netty/netty-codec-http/4.1.92.Final/netty-codec-http-4.1.92.Final.jar:/home/rushabh.chatarkar/.m2/repository/io/netty/netty-common/4.1.92.Final/netty-common-4.1.92.Final.jar:/home/rushabh.chatarkar/.m2/repository/io/netty/netty-buffer/4.1.92.Final/netty-buffer-4.1.92.Final.jar:/home/rushabh.chatarkar/.m2/repository/io/netty/netty-transport/4.1.92.Final/netty-transport-4.1.92.Final.jar:/home/rushabh.chatarkar/.m2/repository/io/netty/netty-codec/4.1.92.Final/netty-codec-4.1.92.Final.jar:/home/rushabh.chatarkar/.m2/repository/io/netty/netty-handler/4.1.92.Final/netty-handler-4.1.92.Final.jar:/home/rushabh.chatarkar/.m2/repository/io/netty/netty-codec-http2/4.1.92.Final/netty-codec-http2-4.1.92.Final.jar:/home/rushabh.chatarkar/.m2/repository/io/netty/netty-resolver-dns/4.1.92.Final/netty-resolver-dns-4.1.92.Final.jar:/home/rushabh.chatarkar/.m2/repository/io/netty/netty-resolver/4.1.92.Final/netty-resolver-4.1.92.Final.jar:/home/rushabh.chatarkar/.m2/repository/io/netty/netty-codec-dns/4.1.92.Final/netty-codec-dns-4.1.92.Final.jar:/home/rushabh.chatarkar/.m2/repository/io/netty/netty-resolver-dns-native-macos/4.1.92.Final/netty-resolver-dns-native-macos-4.1.92.Final-osx-x86_64.jar:/home/rushabh.chatarkar/.m2/repository/io/netty/netty-resolver-dns-classes-macos/4.1.92.Final/netty-resolver-dns-classes-macos-4.1.92.Final.jar:/home/rushabh.chatarkar/.m2/repository/io/netty/netty-transport-native-epoll/4.1.92.Final/netty-transport-native-epoll-4.1.92.Final-linux-x86_64.jar:/home/rushabh.chatarkar/.m2/repository/io/netty/netty-transport-native-unix-common/4.1.92.Final/netty-transport-native-unix-common-4.1.92.Final.jar:/home/rushabh.chatarkar/.m2/repository/io/netty/netty-transport-classes-epoll/4.1.92.Final/netty-transport-classes-epoll-4.1.92.Final.jar:/home/rushabh.chatarkar/.m2/repository/io/projectreactor/netty/reactor-netty-core/1.1.7/reactor-netty-core-1.1.7.jar:/home/rushabh.chatarkar/.m2/repository/io/netty/netty-handler-proxy/4.1.92.Final/netty-handler-proxy-4.1.92.Final.jar:/home/rushabh.chatarkar/.m2/repository/io/netty/netty-codec-socks/4.1.92.Final/netty-codec-socks-4.1.92.Final.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/spring-web/6.0.9/spring-web-6.0.9.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/spring-beans/6.0.9/spring-beans-6.0.9.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/spring-webflux/6.0.9/spring-webflux-6.0.9.jar:/home/rushabh.chatarkar/.m2/repository/io/projectreactor/reactor-core/3.5.6/reactor-core-3.5.6.jar:/home/rushabh.chatarkar/.m2/repository/org/reactivestreams/reactive-streams/1.0.4/reactive-streams-1.0.4.jar:/home/rushabh.chatarkar/.m2/repository/com/google/code/gson/gson/2.8.9/gson-2.8.9.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/boot/spring-boot-starter-cache/3.1.0/spring-boot-starter-cache-3.1.0.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/spring-context-support/6.0.9/spring-context-support-6.0.9.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/spring-context/6.0.9/spring-context-6.0.9.jar:/home/rushabh.chatarkar/.m2/repository/com/github/ben-manes/caffeine/caffeine/3.0.4/caffeine-3.0.4.jar:/home/rushabh.chatarkar/.m2/repository/org/checkerframework/checker-qual/3.18.0/checker-qual-3.18.0.jar:/home/rushabh.chatarkar/.m2/repository/com/google/errorprone/error_prone_annotations/2.9.0/error_prone_annotations-2.9.0.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.1.0/spring-boot-starter-data-jpa-3.1.0.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.1.0/spring-boot-starter-jdbc-3.1.0.jar:/home/rushabh.chatarkar/.m2/repository/com/zaxxer/HikariCP/5.0.1/HikariCP-5.0.1.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/spring-jdbc/6.0.9/spring-jdbc-6.0.9.jar:/home/rushabh.chatarkar/.m2/repository/org/hibernate/orm/hibernate-core/6.2.2.Final/hibernate-core-6.2.2.Final.jar:/home/rushabh.chatarkar/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/home/rushabh.chatarkar/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/home/rushabh.chatarkar/.m2/repository/org/jboss/logging/jboss-logging/3.5.0.Final/jboss-logging-3.5.0.Final.jar:/home/rushabh.chatarkar/.m2/repository/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar:/home/rushabh.chatarkar/.m2/repository/io/smallrye/jandex/3.0.5/jandex-3.0.5.jar:/home/rushabh.chatarkar/.m2/repository/com/fasterxml/classmate/1.5.1/classmate-1.5.1.jar:/home/rushabh.chatarkar/.m2/repository/net/bytebuddy/byte-buddy/1.14.4/byte-buddy-1.14.4.jar:/home/rushabh.chatarkar/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.2/jaxb-runtime-4.0.2.jar:/home/rushabh.chatarkar/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.2/jaxb-core-4.0.2.jar:/home/rushabh.chatarkar/.m2/repository/org/eclipse/angus/angus-activation/2.0.0/angus-activation-2.0.0.jar:/home/rushabh.chatarkar/.m2/repository/org/glassfish/jaxb/txw2/4.0.2/txw2-4.0.2.jar:/home/rushabh.chatarkar/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.1/istack-commons-runtime-4.1.1.jar:/home/rushabh.chatarkar/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/home/rushabh.chatarkar/.m2/repository/org/antlr/antlr4-runtime/4.10.1/antlr4-runtime-4.10.1.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/data/spring-data-jpa/3.1.0/spring-data-jpa-3.1.0.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/data/spring-data-commons/3.1.0/spring-data-commons-3.1.0.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/spring-orm/6.0.9/spring-orm-6.0.9.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/spring-tx/6.0.9/spring-tx-6.0.9.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/spring-aspects/6.0.9/spring-aspects-6.0.9.jar:/home/rushabh.chatarkar/.m2/repository/org/liquibase/liquibase-core/4.23.0/liquibase-core-4.23.0.jar:/home/rushabh.chatarkar/.m2/repository/com/opencsv/opencsv/5.7.1/opencsv-5.7.1.jar:/home/rushabh.chatarkar/.m2/repository/org/apache/commons/commons-text/1.10.0/commons-text-1.10.0.jar:/home/rushabh.chatarkar/.m2/repository/org/apache/commons/commons-collections4/4.4/commons-collections4-4.4.jar:/home/rushabh.chatarkar/.m2/repository/org/yaml/snakeyaml/1.33/snakeyaml-1.33.jar:/home/rushabh.chatarkar/.m2/repository/javax/xml/bind/jaxb-api/2.3.1/jaxb-api-2.3.1.jar:/home/rushabh.chatarkar/.m2/repository/javax/activation/javax.activation-api/1.2.0/javax.activation-api-1.2.0.jar:/home/rushabh.chatarkar/.m2/repository/org/postgresql/postgresql/42.6.0/postgresql-42.6.0.jar:/home/rushabh.chatarkar/.m2/repository/io/github/resilience4j/resilience4j-spring-boot2/1.6.1/resilience4j-spring-boot2-1.6.1.jar:/home/rushabh.chatarkar/.m2/repository/io/vavr/vavr/0.10.3/vavr-0.10.3.jar:/home/rushabh.chatarkar/.m2/repository/io/vavr/vavr-match/0.10.3/vavr-match-0.10.3.jar:/home/rushabh.chatarkar/.m2/repository/org/slf4j/slf4j-api/2.0.7/slf4j-api-2.0.7.jar:/home/rushabh.chatarkar/.m2/repository/io/github/resilience4j/resilience4j-spring/1.6.1/resilience4j-spring-1.6.1.jar:/home/rushabh.chatarkar/.m2/repository/io/github/resilience4j/resilience4j-annotations/1.6.1/resilience4j-annotations-1.6.1.jar:/home/rushabh.chatarkar/.m2/repository/io/github/resilience4j/resilience4j-consumer/1.6.1/resilience4j-consumer-1.6.1.jar:/home/rushabh.chatarkar/.m2/repository/io/github/resilience4j/resilience4j-core/1.6.1/resilience4j-core-1.6.1.jar:/home/rushabh.chatarkar/.m2/repository/io/github/resilience4j/resilience4j-circularbuffer/1.6.1/resilience4j-circularbuffer-1.6.1.jar:/home/rushabh.chatarkar/.m2/repository/io/github/resilience4j/resilience4j-framework-common/1.6.1/resilience4j-framework-common-1.6.1.jar:/home/rushabh.chatarkar/.m2/repository/io/github/resilience4j/resilience4j-circuitbreaker/1.6.1/resilience4j-circuitbreaker-1.6.1.jar:/home/rushabh.chatarkar/.m2/repository/io/github/resilience4j/resilience4j-ratelimiter/1.6.1/resilience4j-ratelimiter-1.6.1.jar:/home/rushabh.chatarkar/.m2/repository/io/github/resilience4j/resilience4j-retry/1.6.1/resilience4j-retry-1.6.1.jar:/home/rushabh.chatarkar/.m2/repository/io/github/resilience4j/resilience4j-bulkhead/1.6.1/resilience4j-bulkhead-1.6.1.jar:/home/rushabh.chatarkar/.m2/repository/io/github/resilience4j/resilience4j-timelimiter/1.6.1/resilience4j-timelimiter-1.6.1.jar:/home/rushabh.chatarkar/.m2/repository/io/github/resilience4j/resilience4j-micrometer/1.6.1/resilience4j-micrometer-1.6.1.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.1.0/spring-boot-starter-web-3.1.0.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.1.0/spring-boot-starter-tomcat-3.1.0.jar:/home/rushabh.chatarkar/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.8/tomcat-embed-core-10.1.8.jar:/home/rushabh.chatarkar/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.8/tomcat-embed-el-10.1.8.jar:/home/rushabh.chatarkar/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.8/tomcat-embed-websocket-10.1.8.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/spring-webmvc/6.0.9/spring-webmvc-6.0.9.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/spring-expression/6.0.9/spring-expression-6.0.9.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.1.0/spring-boot-starter-test-3.1.0.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/boot/spring-boot-test/3.1.0/spring-boot-test-3.1.0.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.1.0/spring-boot-test-autoconfigure-3.1.0.jar:/home/rushabh.chatarkar/.m2/repository/com/jayway/jsonpath/json-path/2.8.0/json-path-2.8.0.jar:/home/rushabh.chatarkar/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.0/jakarta.xml.bind-api-4.0.0.jar:/home/rushabh.chatarkar/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.2/jakarta.activation-api-2.1.2.jar:/home/rushabh.chatarkar/.m2/repository/net/minidev/json-smart/2.4.10/json-smart-2.4.10.jar:/home/rushabh.chatarkar/.m2/repository/net/minidev/accessors-smart/2.4.9/accessors-smart-2.4.9.jar:/home/rushabh.chatarkar/.m2/repository/org/ow2/asm/asm/9.3/asm-9.3.jar:/home/rushabh.chatarkar/.m2/repository/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar:/home/rushabh.chatarkar/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/home/rushabh.chatarkar/.m2/repository/org/junit/jupiter/junit-jupiter/5.9.0/junit-jupiter-5.9.0.jar:/home/rushabh.chatarkar/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.9.0/junit-jupiter-params-5.9.0.jar:/home/rushabh.chatarkar/.m2/repository/org/mockito/mockito-core/5.3.1/mockito-core-5.3.1.jar:/home/rushabh.chatarkar/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.4/byte-buddy-agent-1.14.4.jar:/home/rushabh.chatarkar/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/home/rushabh.chatarkar/.m2/repository/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar:/home/rushabh.chatarkar/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/spring-core/6.0.9/spring-core-6.0.9.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/spring-jcl/6.0.9/spring-jcl-6.0.9.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/spring-test/6.0.9/spring-test-6.0.9.jar:/home/rushabh.chatarkar/.m2/repository/org/xmlunit/xmlunit-core/2.9.1/xmlunit-core-2.9.1.jar:/home/rushabh.chatarkar/.m2/repository/org/springdoc/springdoc-openapi-ui/1.6.15/springdoc-openapi-ui-1.6.15.jar:/home/rushabh.chatarkar/.m2/repository/org/springdoc/springdoc-openapi-webmvc-core/1.6.15/springdoc-openapi-webmvc-core-1.6.15.jar:/home/rushabh.chatarkar/.m2/repository/org/springdoc/springdoc-openapi-common/1.6.15/springdoc-openapi-common-1.6.15.jar:/home/rushabh.chatarkar/.m2/repository/io/swagger/core/v3/swagger-core/2.2.8/swagger-core-2.2.8.jar:/home/rushabh.chatarkar/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.15.0/jackson-dataformat-yaml-2.15.0.jar:/home/rushabh.chatarkar/.m2/repository/io/swagger/core/v3/swagger-annotations/2.2.8/swagger-annotations-2.2.8.jar:/home/rushabh.chatarkar/.m2/repository/io/swagger/core/v3/swagger-models/2.2.8/swagger-models-2.2.8.jar:/home/rushabh.chatarkar/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/home/rushabh.chatarkar/.m2/repository/org/webjars/swagger-ui/4.17.1/swagger-ui-4.17.1.jar:/home/rushabh.chatarkar/.m2/repository/org/webjars/webjars-locator-core/0.52/webjars-locator-core-0.52.jar:/home/rushabh.chatarkar/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.15.0/jackson-core-2.15.0.jar:/home/rushabh.chatarkar/.m2/repository/io/github/classgraph/classgraph/4.8.149/classgraph-4.8.149.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/boot/spring-boot-starter-actuator/3.1.0/spring-boot-starter-actuator-3.1.0.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/boot/spring-boot-actuator-autoconfigure/3.1.0/spring-boot-actuator-autoconfigure-3.1.0.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/boot/spring-boot-actuator/3.1.0/spring-boot-actuator-3.1.0.jar:/home/rushabh.chatarkar/.m2/repository/io/micrometer/micrometer-observation/1.11.0/micrometer-observation-1.11.0.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.1.0/spring-boot-starter-aop-3.1.0.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/spring-aop/6.0.9/spring-aop-6.0.9.jar:/home/rushabh.chatarkar/.m2/repository/org/aspectj/aspectjweaver/1.9.19/aspectjweaver-1.9.19.jar:/home/rushabh.chatarkar/.m2/repository/io/micrometer/micrometer-core/1.11.0/micrometer-core-1.11.0.jar:/home/rushabh.chatarkar/.m2/repository/io/micrometer/micrometer-commons/1.11.0/micrometer-commons-1.11.0.jar:/home/rushabh.chatarkar/.m2/repository/org/hdrhistogram/HdrHistogram/2.1.12/HdrHistogram-2.1.12.jar:/home/rushabh.chatarkar/.m2/repository/org/latencyutils/LatencyUtils/2.0.3/LatencyUtils-2.0.3.jar:/home/rushabh.chatarkar/.m2/repository/io/micrometer/micrometer-registry-prometheus/1.11.0/micrometer-registry-prometheus-1.11.0.jar:/home/rushabh.chatarkar/.m2/repository/io/prometheus/simpleclient_common/0.16.0/simpleclient_common-0.16.0.jar:/home/rushabh.chatarkar/.m2/repository/io/prometheus/simpleclient/0.16.0/simpleclient-0.16.0.jar:/home/rushabh.chatarkar/.m2/repository/io/prometheus/simpleclient_tracer_otel/0.16.0/simpleclient_tracer_otel-0.16.0.jar:/home/rushabh.chatarkar/.m2/repository/io/prometheus/simpleclient_tracer_common/0.16.0/simpleclient_tracer_common-0.16.0.jar:/home/rushabh.chatarkar/.m2/repository/io/prometheus/simpleclient_tracer_otel_agent/0.16.0/simpleclient_tracer_otel_agent-0.16.0.jar:/home/rushabh.chatarkar/.m2/repository/uk/co/allianz/ds/common/coreeventprocessorlib/1.0.43/coreeventprocessorlib-1.0.43.jar:/home/rushabh.chatarkar/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.15.0/jackson-annotations-2.15.0.jar:/home/rushabh.chatarkar/.m2/repository/ch/qos/logback/logback-classic/1.4.8/logback-classic-1.4.8.jar:/home/rushabh.chatarkar/.m2/repository/ch/qos/logback/logback-core/1.4.8/logback-core-1.4.8.jar:/home/rushabh.chatarkar/.m2/repository/com/allianz/cisl/com.allianz.cisl.ext.uk.springjackson/2.44.5/com.allianz.cisl.ext.uk.springjackson-2.44.5.jar:/home/rushabh.chatarkar/.m2/repository/org/joda/joda-money/0.11/joda-money-0.11.jar:/home/rushabh.chatarkar/.m2/repository/com/google/guava/guava/30.0-jre/guava-30.0-jre.jar:/home/rushabh.chatarkar/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:/home/rushabh.chatarkar/.m2/repository/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/home/rushabh.chatarkar/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:/home/rushabh.chatarkar/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar:/home/rushabh.chatarkar/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.0/jackson-datatype-jsr310-2.15.0.jar:/home/rushabh.chatarkar/.m2/repository/com/allianz/cisl/com.allianz.cisl.ext.uk.jackson.model/2.44.5/com.allianz.cisl.ext.uk.jackson.model-2.44.5.jar:/home/rushabh.chatarkar/.m2/repository/com/allianz/cisl/com.allianz.cisl.ext.uk.events/2.44.5/com.allianz.cisl.ext.uk.events-2.44.5.jar:/home/rushabh.chatarkar/.m2/repository/org/codehaus/janino/janino/3.1.6/janino-3.1.6.jar:/home/rushabh.chatarkar/.m2/repository/org/codehaus/janino/commons-compiler/3.1.6/commons-compiler-3.1.6.jar:/home/rushabh.chatarkar/.m2/repository/org/projectlombok/lombok/1.18.28/lombok-1.18.28.jar:/home/rushabh.chatarkar/.m2/repository/net/logstash/logback/logstash-logback-encoder/7.4/logstash-logback-encoder-7.4.jar:/home/rushabh.chatarkar/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.15.0/jackson-databind-2.15.0.jar:/home/rushabh.chatarkar/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.9.0/junit-jupiter-engine-5.9.0.jar:/home/rushabh.chatarkar/.m2/repository/org/junit/platform/junit-platform-engine/1.9.0/junit-platform-engine-1.9.0.jar:/home/rushabh.chatarkar/.m2/repository/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar:/home/rushabh.chatarkar/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.9.0/junit-jupiter-api-5.9.0.jar:/home/rushabh.chatarkar/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/home/rushabh.chatarkar/.m2/repository/org/junit/platform/junit-platform-commons/1.9.0/junit-platform-commons-1.9.0.jar:/home/rushabh.chatarkar/.m2/repository/org/junit/platform/junit-platform-launcher/1.9.0/junit-platform-launcher-1.9.0.jar:/home/rushabh.chatarkar/.m2/repository/org/mockito/mockito-junit-jupiter/4.8.0/mockito-junit-jupiter-4.8.0.jar:/home/rushabh.chatarkar/.m2/repository/org/junit/vintage/junit-vintage-engine/5.9.0/junit-vintage-engine-5.9.0.jar:/home/rushabh.chatarkar/.m2/repository/junit/junit/4.13.2/junit-4.13.2.jar:/home/rushabh.chatarkar/.m2/repository/org/hamcrest/hamcrest-core/2.2/hamcrest-core-2.2.jar:/home/rushabh.chatarkar/.m2/repository/com/shazam/shazamcrest/0.11/shazamcrest-0.11.jar:/home/rushabh.chatarkar/.m2/repository/net/javacrumbs/json-unit/json-unit/2.35.0/json-unit-2.35.0.jar:/home/rushabh.chatarkar/.m2/repository/net/javacrumbs/json-unit/json-unit-core/2.35.0/json-unit-core-2.35.0.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/restdocs/spring-restdocs-mockmvc/3.0.0/spring-restdocs-mockmvc-3.0.0.jar:/home/rushabh.chatarkar/.m2/repository/org/springframework/restdocs/spring-restdocs-core/3.0.0/spring-restdocs-core-3.0.0.jar:/home/rushabh.chatarkar/.m2/repository/jakarta/servlet/jakarta.servlet-api/6.0.0/jakarta.servlet-api-6.0.0.jar:/home/rushabh.chatarkar/.m2/repository/capital/scalable/spring-auto-restdocs-core/2.0.11/spring-auto-restdocs-core-2.0.11.jar:/home/rushabh.chatarkar/.m2/repository/capital/scalable/spring-auto-restdocs-annotations/2.0.11/spring-auto-restdocs-annotations-2.0.11.jar:/home/rushabh.chatarkar/.m2/repository/org/apache/commons/commons-lang3/3.12.0/commons-lang3-3.12.0.jar com.intellij.rt.junit.JUnitStarter -ideVersion5 -junit5 uk.co.allianz.rap.lc.service.LossControlServiceImplTest6
OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
10:11:12.647 [main] INFO uk.co.allianz.rap.lc.service.LossControlServiceImpl -- Token set in header.

java.lang.NullPointerException: Cannot invoke "org.springframework.web.reactive.function.client.WebClient$RequestBodyUriSpec.uri(String, Object[])" because the return value of "org.springframework.web.reactive.function.client.WebClient.post()" is null

	at uk.co.allianz.rap.lc.service.LossControlServiceImpl.inspectionsPost(LossControlServiceImpl.java:62)
	at uk.co.allianz.rap.lc.service.LossControlServiceImplTest6.testInspectionsPost(LossControlServiceImplTest6.java:75)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:217)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:147)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:127)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:90)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:55)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:102)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)


Process finished with exit code 255




////////////
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.test.web.reactive.server.MockWebClient;
import reactor.core.publisher.Mono;
import uk.co.allianz.rap.lc.model.request.importclient.ImportClientRequest;
import uk.co.allianz.rap.lc.model.request.importinspections.ImportInspectionsRequest;
import uk.co.allianz.rap.lc.model.response.importclient.ImportClientResponse;
import uk.co.allianz.rap.lc.model.response.importinspections.ImportInspectionResponse;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

class LossControlServiceImplTest1 {

    @Mock
    private WebClient.Builder webClientBuilder;

    private LossControlServiceImpl lossControlService;

    private MockWebClient.RequestHeadersUriSpec requestHeadersUriSpec;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        requestHeadersUriSpec = MockWebClient.mockRequest(
                HttpMethod.POST, "http://example.com"
        ).header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE);
        when(webClientBuilder.build()).thenReturn(requestHeadersUriSpec);
        lossControlService = new LossControlServiceImpl(webClientBuilder);
    }

    @Test
    void testClientPost() {
        ImportClientRequest importClientRequest = new ImportClientRequest();
        String bearerToken = "dummyToken";
        ImportClientResponse expectedResponse = new ImportClientResponse();

        when(requestHeadersUriSpec.headers(any())).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.bodyValue(importClientRequest)).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.retrieve()).thenReturn(MockWebClient.MockResponseSpec.ok().body(Mono.just(expectedResponse), ImportClientResponse.class));

        ImportClientResponse response = lossControlService.clientPost(importClientRequest, bearerToken);

        assertNotNull(response);
        assertEquals(expectedResponse, response);
    }

    @Test
    void testInspectionsPost() {
        ImportInspectionsRequest importInspectionsRequest = new ImportInspectionsRequest();
        String bearerToken = "dummyToken";
        ImportInspectionResponse expectedResponse = new ImportInspectionResponse();

        when(requestHeadersUriSpec.headers(any())).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.bodyValue(importInspectionsRequest)).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.retrieve()).thenReturn(MockWebClient.MockResponseSpec.ok().body(Mono.just(expectedResponse), ImportInspectionResponse.class));

        ImportInspectionResponse response = lossControlService.inspectionsPost(importInspectionsRequest, bearerToken);

        assertNotNull(response);
        assertEquals(expectedResponse, response);
    }
}




........................
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.test.web.reactive.server.WebTestClient;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;
import uk.co.allianz.rap.lc.model.request.importclient.ImportClientRequest;
import uk.co.allianz.rap.lc.model.request.importinspections.ImportInspectionsRequest;
import uk.co.allianz.rap.lc.model.response.importclient.ImportClientResponse;
import uk.co.allianz.rap.lc.model.response.importinspections.ImportInspectionResponse;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

public class LossControlServiceImplTest2 {

    @Mock
    private WebClient.Builder webClientBuilder;

    @Mock
    private WebClient.RequestHeadersUriSpec<?> requestHeadersUriSpec;

    @Mock
    private WebClient.RequestHeadersSpec<?> requestHeadersSpec;

    @Mock
    private WebClient.ResponseSpec responseSpec;

    @InjectMocks
    private LossControlServiceImpl lossControlService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        lossControlService = new LossControlServiceImpl();
        lossControlService.setWebClientBuilder(webClientBuilder);
    }

    @Test
    public void testClientPost() {
        String importClientUrl = "http://example.com/import-client";
        String bearerToken = "mockBearerToken";

        ImportClientRequest importClientRequest = new ImportClientRequest();
        ImportClientResponse mockResponse = new ImportClientResponse();

        when(webClientBuilder.build()).thenReturn(webClientBuilder);
        when(webClientBuilder.baseUrl(importClientUrl)).thenReturn(webClientBuilder);
        when(webClientBuilder.build().post()).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.uri(importClientUrl)).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.headers(any())).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.contentType(MediaType.APPLICATION_JSON)).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.bodyValue(importClientRequest)).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(ImportClientResponse.class)).thenReturn(Mono.just(mockResponse));
        when(responseSpec.block()).thenReturn(mockResponse);

        ImportClientResponse result = lossControlService.clientPost(importClientRequest, bearerToken);

        assertNotNull(result);
        assertEquals(mockResponse, result);

        verify(webClientBuilder).build();
        verify(webClientBuilder).baseUrl(importClientUrl);
        verify(webClientBuilder.build().post()).uri(importClientUrl);
        verify(requestHeadersSpec).headers(any());
        verify(requestHeadersSpec).contentType(MediaType.APPLICATION_JSON);
        verify(requestHeadersSpec).bodyValue(importClientRequest);
        verify(requestHeadersSpec).retrieve();
        verify(responseSpec).bodyToMono(ImportClientResponse.class);
        verify(responseSpec).block();
    }

    @Test
    public void testInspectionsPost() {
        String importInspectionsUrl = "http://example.com/import-inspections";
        String bearerToken = "mockBearerToken";

        ImportInspectionsRequest importInspectionsRequest = new ImportInspectionsRequest();
        ImportInspectionResponse mockResponse = new ImportInspectionResponse();

        when(webClientBuilder.build()).thenReturn(webClientBuilder);
        when(webClientBuilder.baseUrl(importInspectionsUrl)).thenReturn(webClientBuilder);
        when(webClientBuilder.build().post()).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.uri(importInspectionsUrl)).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.headers(any())).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.contentType(MediaType.APPLICATION_JSON)).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.bodyValue(importInspectionsRequest)).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(ImportInspectionResponse.class)).thenReturn(Mono.just(mockResponse));
        when(responseSpec.block()).thenReturn(mockResponse);

        ImportInspectionResponse result = lossControlService.inspectionsPost(importInspectionsRequest, bearerToken);

        assertNotNull(result);
        assertEquals(mockResponse, result);

        verify(webClientBuilder).build();
        verify(webClientBuilder).baseUrl(importInspectionsUrl);
        verify(webClientBuilder.build().post()).uri(importInspectionsUrl);
        verify(requestHeadersSpec).headers(any());
        verify(requestHeadersSpec).contentType(MediaType.APPLICATION_JSON);
        verify(requestHeadersSpec).bodyValue(importInspectionsRequest);
        verify(requestHeadersSpec).retrieve();
        verify(responseSpec).bodyToMono(ImportInspectionResponse.class);
        verify(responseSpec).block();
    }
}
.............


import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;
import uk.co.allianz.rap.lc.model.request.importclient.ImportClientRequest;
import uk.co.allianz.rap.lc.model.request.importinspections.ImportInspectionsRequest;
import uk.co.allianz.rap.lc.model.response.importclient.ImportClientResponse;
import uk.co.allianz.rap.lc.model.response.importinspections.ImportInspectionResponse;

public class LossControlServiceImplTest5 {

    @Mock
    private WebClient.Builder webClientBuilder;

    @Mock
    private WebClient.RequestHeadersUriSpec<?> requestHeadersUriSpec;

    @Mock
    private WebClient.RequestHeadersSpec<?> requestHeadersSpec;

    @Mock
    private WebClient.ResponseSpec responseSpec;

    private LossControlServiceImpl lossControlService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        lossControlService = new LossControlServiceImpl();
        lossControlService.setWebClientBuilder(webClientBuilder);

        when(webClientBuilder.build()).thenReturn(webClientBuilder);
        when(webClientBuilder.baseUrl(anyString())).thenReturn(webClientBuilder);
        when(webClientBuilder.defaultHeader(anyString(), anyString())).thenReturn(webClientBuilder);
        when(webClientBuilder.build().post()).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.uri(anyString())).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.headers(any())).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.contentType(any())).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.bodyValue(any())).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
    }

    @Test
    public void testClientPost() {
        ImportClientRequest importClientRequest = new ImportClientRequest(/* initialize with required data */);
        String bearerToken = "yourBearerTokenHere";

        ImportClientResponse expectedResponse = new ImportClientResponse(/* initialize with expected data */);
        when(responseSpec.bodyToMono(ImportClientResponse.class)).thenReturn(Mono.just(expectedResponse));

        ImportClientResponse actualResponse = lossControlService.clientPost(importClientRequest, bearerToken);

        verify(webClientBuilder.build().post(), times(1));
        verify(requestHeadersUriSpec.uri(lossControlService.getImportClientUrl()), times(1));
        verify(requestHeadersSpec.headers(any(HttpHeaders.class)), times(1));
        verify(requestHeadersSpec.contentType(MediaType.APPLICATION_JSON), times(1));
        verify(requestHeadersSpec.bodyValue(importClientRequest), times(1));
        verify(requestHeadersSpec.retrieve(), times(1));
        verify(responseSpec.bodyToMono(ImportClientResponse.class), times(1));
        
        // Additional assertions to compare actualResponse with expectedResponse
    }

    @Test
    public void testInspectionsPost() {
        ImportInspectionsRequest importInspectionsRequest = new ImportInspectionsRequest(/* initialize with required data */);
        String bearerToken = "yourBearerTokenHere";

        ImportInspectionResponse expectedResponse = new ImportInspectionResponse(/* initialize with expected data */);
        when(responseSpec.bodyToMono(ImportInspectionResponse.class)).thenReturn(Mono.just(expectedResponse));

        ImportInspectionResponse actualResponse = lossControlService.inspectionsPost(importInspectionsRequest, bearerToken);

        verify(webClientBuilder.build().post(), times(1));
        verify(requestHeadersUriSpec.uri(lossControlService.getImportInspectionsUrl()), times(1));
        verify(requestHeadersSpec.headers(any(HttpHeaders.class)), times(1));
        verify(requestHeadersSpec.contentType(MediaType.APPLICATION_JSON), times(1));
        verify(requestHeadersSpec.bodyValue(importInspectionsRequest), times(1));
        verify(requestHeadersSpec.retrieve(), times(1));
        verify(responseSpec.bodyToMono(ImportInspectionResponse.class), times(1));
        
        // Additional assertions to compare actualResponse with expectedResponse
    }
}



///

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;
import uk.co.allianz.rap.lc.model.request.importclient.ImportClientRequest;
import uk.co.allianz.rap.lc.model.request.importinspections.ImportInspectionsRequest;
import uk.co.allianz.rap.lc.model.response.importclient.ImportClientResponse;
import uk.co.allianz.rap.lc.model.response.importinspections.ImportInspectionResponse;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

class LossControlServiceImplTest6 {

    @Mock
    private WebClient webClient;

    @InjectMocks
    private LossControlServiceImpl lossControlService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testClientPost() {
        ImportClientRequest importClientRequest = new ImportClientRequest();
        String bearerToken = "sampleBearerToken";

        ImportClientResponse expectedResponse = new ImportClientResponse();
        // Mock WebClient behavior
        WebClient.RequestHeadersUriSpec requestHeadersUriSpecMock = mock(WebClient.RequestHeadersUriSpec.class);
        when(webClient.post()).thenReturn(requestHeadersUriSpecMock);
        WebClient.RequestHeadersSpec requestHeadersSpecMock = mock(WebClient.RequestHeadersSpec.class);
        when(requestHeadersUriSpecMock.uri(any(String.class))).thenReturn(requestHeadersSpecMock);
        WebClient.RequestHeadersSpec requestHeadersWithHeadersMock = mock(WebClient.RequestHeadersSpec.class);
        when(requestHeadersSpecMock.headers(any())).thenReturn(requestHeadersWithHeadersMock);
        WebClient.RequestBodyUriSpec requestBodyUriSpecMock = mock(WebClient.RequestBodyUriSpec.class);
        when(requestHeadersWithHeadersMock.contentType(MediaType.APPLICATION_JSON)).thenReturn(requestBodyUriSpecMock);
        WebClient.RequestBodySpec requestBodySpecMock = mock(WebClient.RequestBodySpec.class);
        when(requestBodyUriSpecMock.bodyValue(importClientRequest)).thenReturn(requestBodySpecMock);
        WebClient.ResponseSpec responseSpecMock = mock(WebClient.ResponseSpec.class);
        when(requestBodySpecMock.retrieve()).thenReturn(responseSpecMock);
        Mono<ImportClientResponse> responseMono = Mono.just(expectedResponse);
        when(responseSpecMock.bodyToMono(ImportClientResponse.class)).thenReturn(responseMono);
        
        ImportClientResponse result = lossControlService.clientPost(importClientRequest, bearerToken);

        verify(webClient, times(1)).post();
        verify(requestHeadersUriSpecMock, times(1)).uri(lossControlService.getImportClientUrl());
        verify(requestHeadersWithHeadersMock, times(1)).contentType(MediaType.APPLICATION_JSON);
        verify(requestBodyUriSpecMock, times(1)).bodyValue(importClientRequest);
        verify(responseSpecMock, times(1)).bodyToMono(ImportClientResponse.class);

        assertEquals(expectedResponse, result);
    }

    @Test
    void testInspectionsPost() {
        ImportInspectionsRequest importInspectionsRequest = new ImportInspectionsRequest();
        String bearerToken = "sampleBearerToken";

        ImportInspectionResponse expectedResponse = new ImportInspectionResponse();
        // Similar mocking process as the previous test

        ImportInspectionResponse result = lossControlService.inspectionsPost(importInspectionsRequest, bearerToken);

        // Similar verification process as the previous test

        assertEquals(expectedResponse, result);
    }
}
//

import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

public class LossControlServiceImplTest7 {

    @Mock
    private WebClient.Builder webClientBuilder;

    @InjectMocks
    private LossControlServiceImpl lossControlService;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testClientPost() {
        // Mock WebClient
        WebClient.RequestBodyUriSpec requestUriSpec = mock(WebClient.RequestBodyUriSpec.class);
        WebClient.RequestHeadersSpec<?> requestHeadersSpec = mock(WebClient.RequestHeadersSpec.class);
        WebClient.ResponseSpec responseSpec = mock(WebClient.ResponseSpec.class);

        when(webClientBuilder.build()).thenReturn(webClientBuilder);
        when(webClientBuilder.baseUrl(anyString())).thenReturn(webClientBuilder);
        when(webClientBuilder.build().post()).thenReturn(requestUriSpec);
        when(requestUriSpec.uri(anyString())).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.headers(any())).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.contentType(MediaType.APPLICATION_JSON)).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.bodyValue(any())).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(ImportClientResponse.class)).thenReturn(Mono.just(new ImportClientResponse()));

        // Call the method being tested
        ImportClientResponse result = lossControlService.clientPost(new ImportClientRequest(), "fakeToken");

        // Verify interactions
        verify(webClientBuilder).build();
        verify(webClientBuilder).baseUrl(anyString());
        verify(requestUriSpec).uri(anyString());
        verify(requestHeadersSpec).headers(any());
        verify(requestHeadersSpec).contentType(MediaType.APPLICATION_JSON);
        verify(requestHeadersSpec).bodyValue(any());
        verify(requestHeadersSpec).retrieve();
        verify(responseSpec).bodyToMono(ImportClientResponse.class);

        // Perform assertions
        assertNotNull(result);
        // You can perform more specific assertions on the result if needed
    }

    // Similar test for inspectionsPost method
}



import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.test.web.reactive.server.WebTestClient;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;
import uk.co.allianz.rap.lc.model.request.importclient.ImportClientRequest;
import uk.co.allianz.rap.lc.model.request.importinspections.ImportInspectionsRequest;
import uk.co.allianz.rap.lc.model.response.importclient.ImportClientResponse;
import uk.co.allianz.rap.lc.model.response.importinspections.ImportInspectionResponse;

public class LossControlServiceImplTest8 {

    @InjectMocks
    private LossControlServiceImpl lossControlService;

    @Mock
    private WebClient.Builder webClientBuilder;

    @Mock
    private WebClient.RequestBodyUriSpec requestBodyUriSpec;

    @Mock
    private WebClient.RequestHeadersSpec requestHeadersSpec;

    @Mock
    private WebClient.RequestHeadersUriSpec<?> requestHeadersUriSpec;

    @Mock
    private WebClient.ResponseSpec responseSpec;

    @Mock
    private WebClient webClient;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);

        when(webClientBuilder.baseUrl(anyString())).thenReturn(webClientBuilder);
        when(webClientBuilder.build()).thenReturn(webClient);
        when(webClient.post()).thenReturn(requestBodyUriSpec);
        when(requestBodyUriSpec.uri(anyString())).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.headers(any())).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.contentType(any())).thenReturn(requestBodyUriSpec);
        when(requestBodyUriSpec.bodyValue(any())).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
    }

    @Test
    public void testClientPost() {
        ImportClientRequest request = new ImportClientRequest();
        String bearerToken = "dummyToken";

        ImportClientResponse expectedResponse = new ImportClientResponse();
        Mono<ImportClientResponse> responseMono = Mono.just(expectedResponse);
        when(responseSpec.bodyToMono(eq(ImportClientResponse.class))).thenReturn(responseMono);

        ImportClientResponse actualResponse = lossControlService.clientPost(request, bearerToken);

        verify(requestHeadersSpec).contentType(MediaType.APPLICATION_JSON);
        verify(requestHeadersSpec).bodyValue(request);
        verify(requestHeadersSpec).headers(any());

        assertEquals(expectedResponse, actualResponse);
    }

    @Test
    public void testInspectionsPost() {
        ImportInspectionsRequest request = new ImportInspectionsRequest();
        String bearerToken = "dummyToken";

        ImportInspectionResponse expectedResponse = new ImportInspectionResponse();
        Mono<ImportInspectionResponse> responseMono = Mono.just(expectedResponse);
        when(responseSpec.bodyToMono(eq(ImportInspectionResponse.class))).thenReturn(responseMono);

        ImportInspectionResponse actualResponse = lossControlService.inspectionsPost(request, bearerToken);

        verify(requestHeadersSpec).contentType(MediaType.APPLICATION_JSON);
        verify(requestHeadersSpec).bodyValue(request);
        verify(requestHeadersSpec).headers(any());

        assertEquals(expectedResponse, actualResponse);
    }
}
