java.lang.NullPointerException: Cannot invoke "uk.co.allianz.rap.lc.model.request.importclient.Client.getLocations()" because the return value of "uk.co.allianz.rap.lc.model.request.importclient.ImportClientRequest.getClient()" is null



        ImportClientResponse actualResponse = importClientService.importClient("json", "correlationId");




    @Test
    void testImportClientWhenClientNotExists() throws CustomException, JsonProcessingException {
        ImportClientRequest request = new ImportClientRequest(); // Create your request object
        ImportClientResponse expectedResponse = new ImportClientResponse(); // Create your expected response object
        
        when(objectMapper.readValue(anyString(), Mockito.eq(ImportClientRequest.class)))
                .thenReturn(request);

        when(lossControlDao.findByClientId(anyString()))
                .thenReturn(null);

        ImportClientResponse actualResponse = importClientService.importClient("json", "correlationId");

        assertEquals(expectedResponse, actualResponse);
    }










































import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class ImportClientServiceImpTest71 {

    @InjectMocks
    private ImportClientServiceImp importClientService;

    @Mock
    private TokenCache tokenCache;

    @Mock
    private LossControlDao lossControlDao;

    @Mock
    private LossControlServiceImpl lossControlServiceImpl;

    @Mock
    private ObjectMapper objectMapper;

    @Test
    public void testImportClient_ClientExists() throws CustomException, JsonProcessingException {
        // Prepare test data
        String json = "{...}"; // Your JSON data
        String correlationId = "correlation123";
        ImportClientRequest importClientRequest = new ImportClientRequest();
        ImportClientResponse mockImportClientResponse = new ImportClientResponse();
        when(objectMapper.readValue(json, ImportClientRequest.class)).thenReturn(importClientRequest);
        when(lossControlDao.findByClientId(any())).thenReturn(Collections.singletonMap("key", "value"));
        when(lossControlServiceImpl.clientPost(any(), any())).thenReturn(mockImportClientResponse);

        // Execute the method
        ImportClientResponse result = importClientService.importClient(json, correlationId);

        // Assert
        assertNotNull(result);
        // Add more assertions as needed
    }

    @Test
    public void testImportClient_ClientDoesNotExist() throws CustomException, JsonProcessingException {
        // Prepare test data
        String json = "{...}"; // Your JSON data
        String correlationId = "correlation123";
        ImportClientRequest importClientRequest = new ImportClientRequest();
        ImportClientResponse mockImportClientResponse = new ImportClientResponse();
        when(objectMapper.readValue(json, ImportClientRequest.class)).thenReturn(importClientRequest);
        when(lossControlDao.findByClientId(any())).thenReturn(null);
        when(lossControlServiceImpl.clientPost(any(), any())).thenReturn(mockImportClientResponse);

        // Execute the method
        ImportClientResponse result = importClientService.importClient(json, correlationId);

        // Assert
        assertNotNull(result);
        // Add more assertions as needed
    }

    // Add more test cases as needed
}






import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import uk.co.allianz.rap.lc.cache.TokenCache;
import uk.co.allianz.rap.lc.dao.LossControlDao;
import uk.co.allianz.rap.lc.exception.CustomException;
import uk.co.allianz.rap.lc.model.request.importclient.ImportClientRequest;
import uk.co.allianz.rap.lc.model.request.importclient.Location;
import uk.co.allianz.rap.lc.model.response.importclient.ImportClientResponse;
import uk.co.allianz.rap.lc.service.LossControlServiceImpl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

class ImportClientServiceImpTest72 {

    @Mock
    private TokenCache tokenCache;

    @Mock
    private LossControlDao lossControlDao;

    @Mock
    private LossControlServiceImpl lossControlServiceImpl;

    @Mock
    private ObjectMapper objectMapper;

    @InjectMocks
    private ImportClientServiceImp importClientService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testImportClientWhenClientExists() throws CustomException, JsonProcessingException {
        ImportClientRequest importClientRequest = new ImportClientRequest();
        importClientRequest.setClient(new ImportClientRequest.Client());
        importClientRequest.getClient().setLookupID("123");

        ImportClientResponse importClientResponse = new ImportClientResponse();

        when(objectMapper.readValue(any(String.class), eq(ImportClientRequest.class)))
            .thenReturn(importClientRequest);

        when(lossControlDao.findByClientId("123"))
            .thenReturn(new HashMap<>());

        when(importClientService.ifClientIsPresent(any(), any(), any(), any()))
            .thenReturn(importClientResponse);

        ImportClientResponse result = importClientService.importClient("json_data", "correlation_id");

        // Verify appropriate method calls and assertions here
    }

    @Test
    void testImportClientWhenClientDoesNotExist() throws CustomException, JsonProcessingException {
        ImportClientRequest importClientRequest = new ImportClientRequest();
        importClientRequest.setClient(new ImportClientRequest.Client());
        importClientRequest.getClient().setLookupID("456");

        ImportClientResponse importClientResponse = new ImportClientResponse();

        when(objectMapper.readValue(any(String.class), eq(ImportClientRequest.class)))
            .thenReturn(importClientRequest);

        when(lossControlDao.findByClientId("456"))
            .thenReturn(null);

        when(importClientService.getClientResponse(any(), any(), any(), any()))
            .thenReturn(importClientResponse);

        ImportClientResponse result = importClientService.importClient("json_data", "correlation_id");

        // Verify appropriate method calls and assertions here
    }

    // Add more test cases for other scenarios
}









import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import uk.co.allianz.rap.lc.cache.TokenCache;
import uk.co.allianz.rap.lc.dao.LossControlDao;
import uk.co.allianz.rap.lc.exception.CustomException;
import uk.co.allianz.rap.lc.model.request.importclient.Client;
import uk.co.allianz.rap.lc.model.request.importclient.ImportClientRequest;
import uk.co.allianz.rap.lc.model.request.importclient.Location;
import uk.co.allianz.rap.lc.model.response.importclient.ImportClientResponse;
import uk.co.allianz.rap.lc.service.LossControlServiceImpl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

class ImportClientServiceImpTest73 {

    @Mock
    private TokenCache tokenCache;

    @Mock
    private LossControlDao lossControlDao;

    @Mock
    private LossControlServiceImpl lossControlServiceImpl;

    @Mock
    private ObjectMapper objectMapper;

    @InjectMocks
    private ImportClientServiceImp importClientServiceImp;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testImportClientWhenClientExists() throws CustomException, JsonProcessingException {
        ImportClientRequest request = new ImportClientRequest();
        Client client = new Client();
        client.setLookupID("clientLookupID");
        Location location = new Location();
        location.setLookupID("locationLookupID");
        ArrayList<Location> locations = new ArrayList<>();
        locations.add(location);
        client.setLocations(locations);
        request.setClient(client);

        ImportClientResponse expectedResponse = new ImportClientResponse();

        when(objectMapper.readValue(any(String.class), eq(ImportClientRequest.class))).thenReturn(request);
        when(lossControlDao.findByClientId(any(String.class))).thenReturn(new HashMap<>());
        when(lossControlServiceImpl.clientPost(any(ImportClientRequest.class), anyString())).thenReturn(expectedResponse);

        ImportClientResponse result = importClientServiceImp.importClient("dummy json", "correlationId");

        verify(lossControlServiceImpl, times(1)).clientPost(any(ImportClientRequest.class), anyString());
        verify(lossControlDao, never()).insertClientId(any(String.class));
        verify(lossControlDao, never()).insertLocationId(any(String.class));
        verify(lossControlDao, never()).updateLcClientId(any(String.class), any(String.class));
        verify(lossControlDao, never()).updateLcLocationId(any(String.class), any(String.class));

        // Perform assertions on the result if needed
    }

    @Test
    void testImportClientWhenClientDoesNotExist() throws CustomException, JsonProcessingException {
        ImportClientRequest request = new ImportClientRequest();
        Client client = new Client();
        client.setLookupID("clientLookupID");
        Location location = new Location();
        location.setLookupID("locationLookupID");
        ArrayList<Location> locations = new ArrayList<>();
        locations.add(location);
        client.setLocations(locations);
        request.setClient(client);

        ImportClientResponse expectedResponse = new ImportClientResponse();

        when(objectMapper.readValue(any(String.class), eq(ImportClientRequest.class))).thenReturn(request);
        when(lossControlDao.findByClientId(any(String.class))).thenReturn(null);
        when(lossControlServiceImpl.clientPost(any(ImportClientRequest.class), anyString())).thenReturn(expectedResponse);

        ImportClientResponse result = importClientServiceImp.importClient("dummy json", "correlationId");

        verify(lossControlServiceImpl, times(1)).clientPost(any(ImportClientRequest.class), anyString());
        verify(lossControlDao, times(1)).insertClientId(any(String.class));
        verify(lossControlDao, times(1)).insertLocationId(any(String.class));
        verify(lossControlDao, times(1)).updateLcClientId(any(String.class), any(String.class));
        verify(lossControlDao, times(1)).updateLcLocationId(any(String.class), any(String.class));

        // Perform assertions on the result if needed
    }
}







import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;

import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import uk.co.allianz.rap.lc.cache.TokenCache;
import uk.co.allianz.rap.lc.dao.LossControlDao;
import uk.co.allianz.rap.lc.exception.CustomException;
import uk.co.allianz.rap.lc.model.request.importclient.ImportClientRequest;
import uk.co.allianz.rap.lc.model.request.importclient.Location;
import uk.co.allianz.rap.lc.model.response.importclient.ImportClientResponse;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.when;

class ImportClientServiceImpTest74 {

    @Mock
    private TokenCache tokenCache;

    @Mock
    private LossControlDao lossControlDao;

    @Mock
    private LossControlServiceImpl lossControlServiceImpl;

    @Mock
    private ObjectMapper objectMapper;

    @InjectMocks
    private ImportClientServiceImp importClientService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testImportClientWhenClientExists() throws CustomException, JsonProcessingException {
        ImportClientRequest request = new ImportClientRequest(); // Create your request object
        ImportClientResponse expectedResponse = new ImportClientResponse(); // Create your expected response object
        
        when(objectMapper.readValue(anyString(), Mockito.eq(ImportClientRequest.class)))
                .thenReturn(request);

        Map<String, Object> clientResult = new HashMap<>();
        clientResult.put("client_id", "123");
        when(lossControlDao.findByClientId(anyString()))
                .thenReturn(clientResult);

        ImportClientResponse actualResponse = importClientService.importClient("json", "correlationId");

        assertEquals(expectedResponse, actualResponse);
    }

    @Test
    void testImportClientWhenClientNotExists() throws CustomException, JsonProcessingException {
        ImportClientRequest request = new ImportClientRequest(); // Create your request object
        ImportClientResponse expectedResponse = new ImportClientResponse(); // Create your expected response object
        
        when(objectMapper.readValue(anyString(), Mockito.eq(ImportClientRequest.class)))
                .thenReturn(request);

        when(lossControlDao.findByClientId(anyString()))
                .thenReturn(null);

        ImportClientResponse actualResponse = importClientService.importClient("json", "correlationId");

        assertEquals(expectedResponse, actualResponse);
    }

    // Additional test cases can be added for other methods in the class
}








import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import uk.co.allianz.rap.lc.cache.TokenCache;
import uk.co.allianz.rap.lc.dao.LossControlDao;
import uk.co.allianz.rap.lc.exception.CustomException;
import uk.co.allianz.rap.lc.model.request.importclient.ImportClientRequest;
import uk.co.allianz.rap.lc.model.request.importclient.Location;
import uk.co.allianz.rap.lc.model.response.importclient.ImportClientResponse;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import static org.mockito.Mockito.*;

public class ImportClientServiceImpTest75 {

    @Mock
    private TokenCache tokenCache;

    @Mock
    private LossControlDao lossControlDao;

    @Mock
    private LossControlServiceImpl lossControlServiceImpl;

    @Mock
    private ObjectMapper objectMapper;

    @InjectMocks
    private ImportClientServiceImp importClientService;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testImportClient_ClientPresent() throws CustomException, JsonProcessingException {
        String json = "{\"client\": {\"lookupID\": \"123\", \"locations\": []}}";
        String correlationId = "corrId";

        ImportClientRequest importClientRequest = new ImportClientRequest();
        importClientRequest.getClient().setLookupID("123");
        when(objectMapper.readValue(json, ImportClientRequest.class)).thenReturn(importClientRequest);

        Map<String, Object> clientResult = new HashMap<>();
        when(lossControlDao.findByClientId("123")).thenReturn(clientResult);

        ImportClientResponse response = new ImportClientResponse(); // Create your response object here
        when(importClientService.ifClientIsPresent(any(), any(), any(), any())).thenReturn(response);

        ImportClientResponse result = importClientService.importClient(json, correlationId);
        // Add assertions for the result
    }

    @Test
    public void testImportClient_ClientNotPresent() throws CustomException, JsonProcessingException {
        String json = "{\"client\": {\"lookupID\": \"123\", \"locations\": []}}";
        String correlationId = "corrId";

        ImportClientRequest importClientRequest = new ImportClientRequest();
        importClientRequest.getClient().setLookupID("123");
        when(objectMapper.readValue(json, ImportClientRequest.class)).thenReturn(importClientRequest);

        when(lossControlDao.findByClientId("123")).thenReturn(null);

        ImportClientResponse response = new ImportClientResponse(); // Create your response object here
        when(importClientService.getClientResponse(any(), any(), any(), any())).thenReturn(response);

        ImportClientResponse result = importClientService.importClient(json, correlationId);
        // Add assertions for the result
    }

    // More test cases can be added for different scenarios
}








///////////////////////////
package uk.co.allianz.rap.lc.util;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import uk.co.allianz.rap.lc.cache.TokenCache;
import uk.co.allianz.rap.lc.dao.LossControlDao;
import uk.co.allianz.rap.lc.exception.CustomException;
import uk.co.allianz.rap.lc.model.request.importclient.ImportClientRequest;
import uk.co.allianz.rap.lc.model.response.importclient.ImportClientResponse;
import uk.co.allianz.rap.lc.model.response.importclient.Location;
import uk.co.allianz.rap.lc.service.LossControlServiceImpl;

import java.util.ArrayList;
import java.util.Map;

@Slf4j
@Service
public class ClientLocation {
    @Autowired
    private TokenCache tokenCache;
    @Autowired
    private LossControlDao lossControlDao;
    @Autowired
    private LossControlServiceImpl lossControlServiceImpl;
    @Autowired
    private ObjectMapper objectMapper;

    public ImportClientResponse getClientResponse(ImportClientResponse importClientResponse, ImportClientRequest importClientRequest, ArrayList<uk.co.allianz.rap.lc.model.request.importclient.Location> locations, String correlationId) throws CustomException {
        log.info("Client and Location are not present");
        lossControlDao.insertClientId(importClientRequest.getClient().getLookupID());
        lossControlDao.insertLocationId(locations.get(0).getLookupID() + "_" + importClientRequest.getClient().getLookupID());
        importClientResponse = lossControlServiceImpl.clientPost(importClientRequest, tokenCache.retrieveTokenFromCache(correlationId));
        lossControlDao.updateLcClientId(importClientRequest.getClient().getLookupID(), importClientResponse.getResult().getClientLookupID());
        ArrayList<Location> locationsResponse = importClientResponse.getResult().getLocations();
        // Lookup ID Response
        lossControlDao.updateLcLocationId(locations.get(0).getLookupID() + "_" + importClientRequest.getClient().getLookupID(), locationsResponse.get(0).getLocationLookupID());

        return importClientResponse;
    }

    public ImportClientResponse ifClientIsPresent(ImportClientResponse importClientResponse, ImportClientRequest importClientRequest, ArrayList<uk.co.allianz.rap.lc.model.request.importclient.Location> locations, String correlationId) throws CustomException, JsonProcessingException {
        //finding LC360 client id in DB exist or not
        Map<String, Object> lcClientId = lossControlDao.findLc360ClientID(importClientRequest.getClient().getLookupID());
        //finding LC360 location id in DB exist or not(combined location lookup ID and client id)
        Map<String, Object> lcLocationId = lossControlDao.findLc360LocationID(locations.get(0).getLookupID() + "_" + importClientRequest.getClient().getLookupID());
        if (lcClientId != null) {
            String lc360ClientId = (String) lcClientId.get(lcClientId.keySet().iterator().next());
            String lc360LocationId = (String) lcLocationId.get(lcLocationId.keySet().iterator().next());
            //set client id and location id in pojo
            importClientRequest.getClient().setLookupID(lc360ClientId);
            locations.get(0).setLookupID(lc360LocationId);
            objectMapper.writeValueAsString(importClientRequest);
            log.info("Received JSON");
            importClientResponse = lossControlServiceImpl.clientPost(importClientRequest, tokenCache.retrieveTokenFromCache(correlationId));

        } else {
            log.info("lc360 location id not present");
        }
        return importClientResponse;
    }
}


























package uk.co.allianz.rap.lc.dao;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import java.util.Map;

@Repository
public class LossControlDaoImpl implements LossControlDao {
    @Autowired
    private JdbcTemplate jdbcTemplate;

    //client methods
    @Override
    public void insertClientId(String client_id) {
        String insert = "insert into client_lookup(client_id) values(?)";
        int update = this.jdbcTemplate.update(insert, client_id);
    }

    @Override
    public void updateLcClientId(String client_id, String lc360_client_id) {
        String update = "update client_lookup set lc360_client_id = ? where client_id = ?";
        this.jdbcTemplate.update(update, lc360_client_id, client_id);
    }

    @Override
    public Map<String, Object> findByClientId(String client_id) {
        String checkClientId = "select * from client_lookup where client_id =?";
        Map<String, Object> result;
        try {
            result = this.jdbcTemplate.queryForMap(checkClientId, client_id);
        } catch (EmptyResultDataAccessException exception) {
            return null;
        }
        return result;
    }

    @Override
    public Map<String, Object> findLc360ClientID(String client_id) {
        String lc360ClientId = "select lc360_client_id from client_lookup where client_id = ? ";
        Map<String, Object> result;
        try {
            result = this.jdbcTemplate.queryForMap(lc360ClientId, client_id);
        } catch (EmptyResultDataAccessException exception) {
            return null;
        }
        return result;
    }

    // Locations methods
    @Override
    public void insertLocationId(String location_id) {
        String insert = "insert into location_lookup(location_id) values(?)";
        int update = this.jdbcTemplate.update(insert, location_id);
    }

    @Override
    public void updateLcLocationId(String location_id, String lc360_location_id) {
        String update = "update location_lookup set lc360_location_id = ? where location_id = ?";
        this.jdbcTemplate.update(update, lc360_location_id, location_id);
    }

    @Override
    public Map<String, Object> findByLocationId(String location_id) {
        String checkLocationId = "select * from location_lookup where location_id =?";
        Map<String, Object> result;
        try {
            result = this.jdbcTemplate.queryForMap(checkLocationId, location_id);
        } catch (EmptyResultDataAccessException exception) {
            return null;
        }
        return result;
    }

    @Override
    public Map<String, Object> findLc360LocationID(String location_id) {
        String lc360LocationId = "select lc360_location_id from location_lookup where location_id = ? ";
        Map<String, Object> result;
        try {
            result = this.jdbcTemplate.queryForMap(lc360LocationId, location_id);
        } catch (EmptyResultDataAccessException exception) {
            return null;
        }
        return result;
    }
}





































package uk.co.allianz.rap.lc.service;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import uk.co.allianz.rap.lc.cache.TokenCache;
import uk.co.allianz.rap.lc.dao.LossControlDao;
import uk.co.allianz.rap.lc.exception.CustomException;
import uk.co.allianz.rap.lc.model.request.importclient.ImportClientRequest;
import uk.co.allianz.rap.lc.model.request.importclient.Location;
import uk.co.allianz.rap.lc.model.response.importclient.ImportClientResponse;
import uk.co.allianz.rap.lc.util.ClientLocation;

import java.util.ArrayList;
import java.util.Map;

/**
 * Extracting fields and data from the "data model".
 * sent from loss-control-adapter and building the API request: ImportClient
 */
@Slf4j
@Service
public class ImportClientServiceImp implements ImportClientService {
    @Autowired
    private ClientLocation clientLocation;
//    @Autowired
//    private TokenCache tokenCache;
    @Autowired
    private LossControlDao lossControlDao;
//    @Autowired
//    private LossControlServiceImpl lossControlServiceImpl;


    @Autowired
    private ObjectMapper objectMapper;

    public ImportClientResponse importClient(final String json, final String correlationId) throws CustomException, JsonProcessingException {
        ImportClientResponse importClientResponse = null;
        ImportClientRequest importClientRequest = objectMapper.readValue(json, ImportClientRequest.class);
        ArrayList<Location> locations = importClientRequest.getClient().getLocations();
        //finding client id in DB exist or not
        Map<String, Object> clientResult = lossControlDao.findByClientId(importClientRequest.getClient().getLookupID());
        if (clientResult != null) {


            importClientResponse = clientLocation.ifClientIsPresent(importClientResponse, importClientRequest, locations, correlationId);
        } else {
            importClientResponse = clientLocation.getClientResponse(importClientResponse, importClientRequest, locations, correlationId);

        }
        log.info("importClientResponse Successfully Received");
        return importClientResponse;

    }
}






























































//Best.. and not null
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.json.JsonSanitizer;

import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

@Service
public class DataService {

	private final Gson gson;

	public DataService(Gson gson) {
		this.gson = gson;
	}

	public List<JsonObject> processJsonData(String jsonData) {

		String sanitizedData = JsonSanitizer.sanitize(jsonData);
		JsonElement element = gson.fromJson(sanitizedData, JsonElement.class);
		List<JsonObject> jsonObjects = new ArrayList<>();

		if (element.isJsonArray()) {
			JsonArray jsonArray = element.getAsJsonArray();
			for (JsonElement arrayElement : jsonArray) {
				JsonObject jsonObject = new JsonObject();
				JsonObject currentObject = jsonObject;

				for (String key : arrayElement.getAsJsonObject().keySet()) {
					String cleanedKey = key.replace(".0.", ".").replace(".1.", ".");
					String[] keyParts = cleanedKey.split("\\.");
					for (int i = 0; i < keyParts.length - 1; i++) {
						String keyPart = keyParts[i];
						JsonObject nestedObject = currentObject.getAsJsonObject(keyPart);
						if (nestedObject == null) {
							nestedObject = new JsonObject();
							currentObject.add(keyPart, nestedObject);
						}
						currentObject = nestedObject;
					}

					// Check if the key is an array index
					if (keyParts[keyParts.length - 1].matches("\\d+")) {
						// Handle array elements
						int index = Integer.parseInt(keyParts[keyParts.length - 1]);
						JsonArray array = currentObject.getAsJsonArray(keyParts[keyParts.length - 2]);
						if (array == null) {
							array = new JsonArray();
							currentObject.add(keyParts[keyParts.length - 2], array);
						}
						if (array.size() <= index) {
							// Add empty objects to the array until the desired index
							for (int j = array.size(); j <= index; j++) {
								JsonObject emptyObject = new JsonObject();
								array.add(emptyObject);
							}
						}
						currentObject = array.get(index).getAsJsonObject();
					} else {
						String value = arrayElement.getAsJsonObject().get(key).getAsString();
						currentObject.addProperty(keyParts[keyParts.length - 1], value);
						currentObject = jsonObject;
					}
				}

				jsonObjects.add(jsonObject);
			}
		}

		return jsonObjects;
	}
}









import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.google.gson.Gson;
import com.google.gson.JsonObject;

@RestController
public class DataController {

	private final DataService dataService;
	private final Gson gson;

	@Autowired
	public DataController(DataService dataService, Gson gson) {
		this.dataService = dataService;
		this.gson = gson;
	}

	@PostMapping("/data")
	public ResponseEntity<String> processData(@RequestBody String jsonData) {
		try {
			
			if(jsonData ==null) {
				throw new IllegalArgumentException("JSON Data Can't be null");
			}
			List<JsonObject> processedData = dataService.processJsonData(jsonData);
			String processedJson = gson.toJson(processedData);
			return ResponseEntity.ok(processedJson);
		} catch (IllegalArgumentException e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}
}
















