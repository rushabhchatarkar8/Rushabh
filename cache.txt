import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.cache.caffeine.CaffeineCacheManager;
import uk.co.allianz.rap.lc.util.JwtUtil;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.*;

public class TokenCacheTest {

    private TokenCache tokenCache;
    private CacheManager cacheManager;
    private Cache cache;
    private JwtUtil jwtUtil;
    private Logger logger;

    @BeforeEach
    public void setup() {
        cacheManager = new CaffeineCacheManager("tokens");
        cache = cacheManager.getCache("tokens");
        jwtUtil = mock(JwtUtil.class);
        logger = mock(Logger.class);
        tokenCache = new TokenCache();
        tokenCache.jwtUtil = jwtUtil;
        tokenCache.cacheManager = cacheManager;
        tokenCache.logger = logger;
    }

    @Test
    public void testUnhappyPath_TokenRetrievalError() {
        String errorMessage = "Error retrieving token from JwtUtil";
        when(jwtUtil.getAuthToken()).thenThrow(new RuntimeException(errorMessage));

        assertThrows(RuntimeException.class, () -> tokenCache.getToken());
        verify(jwtUtil).getAuthToken();
        verify(logger).error("Error retrieving token from JwtUtil", errorMessage);
    }
}


....
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.cache.caffeine.CaffeineCacheManager;
import uk.co.allianz.rap.lc.util.JwtUtil;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.Mockito.*;

public class TokenCacheTest {

    private TokenCache tokenCache;
    private CacheManager cacheManager;
    private Cache cache;
    private JwtUtil jwtUtil;
    private Logger logger;

    @BeforeEach
    public void setup() {
        cacheManager = new CaffeineCacheManager("tokens");
        ((CaffeineCacheManager) cacheManager).setCaffeine(Caffeine.newBuilder()
                .build());
        cache = cacheManager.getCache("tokens");
        jwtUtil = mock(JwtUtil.class);
        logger = mock(Logger.class);
        tokenCache = new TokenCache();
        tokenCache.jwtUtil = jwtUtil;
        tokenCache.cacheManager = cacheManager;
        tokenCache.logger = logger;
    }

    @Test
    public void testGetToken_UnhappyPath_JwtUtilReturnsNull() {
        when(jwtUtil.getAuthToken()).thenReturn(null);

        String result = tokenCache.getToken();

        verify(jwtUtil).getAuthToken();
        verifyZeroInteractions(cache);
        assertNull(result);
    }
}


......
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.cache.CacheManager;
import org.springframework.cache.caffeine.CaffeineCacheManager;
import uk.co.allianz.rap.lc.util.JwtUtil;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;

public class TokenCacheTest {

    private TokenCache tokenCache;
    private CacheManager cacheManager;
    private JwtUtil jwtUtil;

    @BeforeEach
    public void setup() {
        cacheManager = new CaffeineCacheManager("tokens");
        ((CaffeineCacheManager) cacheManager).setCaffeine(cacheBuilder -> cacheBuilder
                .expireAfterWrite(50, TimeUnit.SECONDS)
                .maximumSize(100));
        jwtUtil = new JwtUtil(); // Instantiate the JwtUtil class or use a real implementation
        tokenCache = new TokenCache();
        tokenCache.jwtUtil = jwtUtil;
        tokenCache.cacheManager = cacheManager;
    }

    @Test
    public void testGetToken_WhenCacheManagerIsNull() {
        tokenCache.cacheManager = null; // Simulate a null CacheManager

        assertThrows(NullPointerException.class, () -> tokenCache.getToken());
    }

    @Test
    public void testRetrieveTokenFromDataSource_WhenDataSourceFails() {
        jwtUtil.setAuthToken(null); // Simulate a failed data source

        assertThrows(NullPointerException.class, () -> tokenCache.getToken());
    }
}




........
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.cache.caffeine.CaffeineCacheManager;
import uk.co.allianz.rap.lc.util.JwtUtil;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class TokenCacheTest {

    private TokenCache tokenCache;
    private CacheManager cacheManager;
    private JwtUtil jwtUtil;
    private Logger logger;

    @BeforeEach
    public void setup() {
        cacheManager = new CaffeineCacheManager("tokens");
        cacheManager.getCache("tokens").clear(); // Clear the cache before each test
        jwtUtil = mock(JwtUtil.class); // Use a mock for JwtUtil
        logger = mock(Logger.class); // Use a mock for Logger
        tokenCache = new TokenCache();
        tokenCache.jwtUtil = jwtUtil;
        tokenCache.cacheManager = cacheManager;
        tokenCache.logger = logger;
    }

    @Test
    public void testGetToken_WhenTokenRetrievalFails() {
        String correlationId = "test-correlation-id";
        String errorMessage = "Failed to retrieve token";

        when(jwtUtil.getAuthToken()).thenReturn(null); // Simulate a failure in token retrieval

        assertThrows(NullPointerException.class, () -> {
            tokenCache.retrieveTokenFromCache(correlationId);
        });

        verify(logger).error("Error retrieving token for Correlation ID: " + correlationId);
        verifyZeroInteractions(cacheManager); // Ensure cacheManager is not used when token retrieval fails
    }
}


............
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.cache.caffeine.CaffeineCache;
import org.springframework.cache.caffeine.CaffeineCacheManager;
import uk.co.allianz.rap.lc.util.JwtUtil;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.*;

public class TokenCacheTest {

    private TokenCache tokenCache;
    private CacheManager cacheManager;
    private Cache cache;
    private JwtUtil jwtUtil;
    private Logger logger;

    @BeforeEach
    public void setup() {
        cacheManager = new CaffeineCacheManager("tokens");
        ((CaffeineCacheManager) cacheManager).setCaffeine(cacheBuilder -> cacheBuilder
                .expireAfterWrite(50, TimeUnit.SECONDS)
                .maximumSize(100));
        cache = cacheManager.getCache("tokens");
        jwtUtil = mock(JwtUtil.class);
        logger = mock(Logger.class);
        tokenCache = new TokenCache();
        tokenCache.jwtUtil = jwtUtil;
        tokenCache.cacheManager = cacheManager;
        tokenCache.logger = logger;
    }

    @Test
    public void testRetrieveTokenFromDataSource_WhenJwtUtilThrowsException() {
        String correlationId = "test-correlation-id";
        String errorMessage = "Error while retrieving token";
        when(jwtUtil.getAuthToken()).thenThrow(new RuntimeException(errorMessage));

        RuntimeException exception = assertThrows(RuntimeException.class,
                () -> tokenCache.retrieveTokenFromCache(correlationId));

        assertEquals(errorMessage, exception.getMessage());
        verify(logger).info("Start invoking lc360 for token : Correlation ID: " + correlationId);
        verify(logger).info("Cache: Loading token from service");
        verify(logger).error("Error while retrieving token", exception);
        verify(logger).info("Successfully retrieved the token from LC360 : Correlation ID: " + correlationId);
    }
}









////////////////////////
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import uk.co.allianz.rap.lc.util.JwtUtil;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class TokenCacheTest {

    private TokenCache tokenCache;
    private JwtUtil jwtUtil;

    private static class TestJwtUtil extends JwtUtil {
        private String testAuthToken;

        public void setTestAuthToken(String testAuthToken) {
            this.testAuthToken = testAuthToken;
        }

        @Override
        public String getAuthToken() {
            return testAuthToken;
        }
    }

    @BeforeEach
    public void setup() {
        jwtUtil = new TestJwtUtil();
        tokenCache = new TokenCache();
        tokenCache.jwtUtil = jwtUtil;
    }

    @Test
    public void testRetrieveTokenFromDataSource() {
        String jwtToken = "test-jwt-token";
        ((TestJwtUtil) jwtUtil).setTestAuthToken(jwtToken); // Set the expected JWT token for testing

        String expectedToken = jwtToken;
        String actualToken = tokenCache.retrieveTokenFromDataSource();

        assertEquals(expectedToken, actualToken);
    }
}


/////////

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import uk.co.allianz.rap.lc.util.JwtUtil;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class TokenCacheTest {

    private TokenCache tokenCache;
    private JwtUtil jwtUtil;

    @BeforeEach
    public void setup() {
        jwtUtil = new JwtUtil(); // Instantiate the JwtUtil class or use a real implementation
        tokenCache = new TokenCache();
        tokenCache.jwtUtil = jwtUtil;
    }

    @Test
    public void testRetrieveTokenFromDataSource() {
        String expectedToken = "test-jwt-token";
        jwtUtil.setAuthToken(expectedToken); // Set the expected JWT token

        String actualToken = tokenCache.retrieveTokenFromDataSource();

        assertEquals(expectedToken, actualToken);
    }
}

....
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import uk.co.allianz.rap.lc.util.JwtUtil;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class TokenCacheTest {

    private TokenCache tokenCache;
    private JwtUtil jwtUtil;

    @BeforeEach
    public void setup() {
        jwtUtil = new JwtUtil(); // Instantiate the JwtUtil class or use a real implementation
        tokenCache = new TokenCache();
        tokenCache.jwtUtil = jwtUtil;
    }

    @Test
    public void testRetrieveTokenFromDataSource() {
        String expectedToken = "test-jwt-token";
        jwtUtil.setAuthToken(expectedToken); // Set the expected JWT token

        String actualToken = tokenCache.retrieveTokenFromDataSource();

        assertEquals(expectedToken, actualToken);
    }
}

....
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import uk.co.allianz.rap.lc.util.JwtUtil;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class TokenCacheTest {

    private TokenCache tokenCache;
    private JwtUtil jwtUtil;

    @BeforeEach
    public void setup() {
        jwtUtil = new JwtUtil(); // Instantiate the JwtUtil class or use a real implementation
        tokenCache = new TokenCache();
        tokenCache.jwtUtil = jwtUtil;
    }

    @Test
    public void testRetrieveTokenFromDataSource() {
        String jwtToken = "test-jwt-token";
        jwtUtil.setAuthToken(jwtToken); // Set the expected JWT token

        String expectedToken = jwtToken;
        String actualToken = tokenCache.retrieveTokenFromDataSource();

        assertEquals(expectedToken, actualToken);
    }
}


////
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.cache.caffeine.CaffeineCacheManager;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class TokenCacheTest {

    private TokenCache tokenCache;
    private CacheManager cacheManager;
    private Cache cache;

    @BeforeEach
    public void setup() {
        cacheManager = new CaffeineCacheManager("tokens");
        cache = cacheManager.getCache("tokens");
        tokenCache = new TokenCache();
        tokenCache.cacheManager = cacheManager;
    }

    @Test
    public void testCacheToken() {
        String token = "test-token";
        tokenCache.cacheToken(token);

        assertEquals(token, cache.get("tokens").get());
    }
}


.......
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.cache.caffeine.CaffeineCache;
import org.springframework.cache.caffeine.CaffeineCacheManager;
import uk.co.allianz.rap.lc.util.JwtUtil;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class TokenCacheTest {

    private TokenCache tokenCache;
    private CacheManager cacheManager;
    private Cache cache;
    private JwtUtil jwtUtil;
    private Logger logger;

    @BeforeEach
    public void setup() {
        cacheManager = new CaffeineCacheManager("tokens");
        cache = cacheManager.getCache("tokens");
        jwtUtil = new JwtUtil(); // Instantiate the JwtUtil class or use a real implementation
        logger = LoggerFactory.getLogger(TokenCache.class); // Use the appropriate logger instance
        tokenCache = new TokenCache();
        tokenCache.jwtUtil = jwtUtil;
        tokenCache.cacheManager = cacheManager;
        tokenCache.logger = logger;
    }

    @Test
    public void testGetToken_WhenTokenNotInCache() {
        String jwtToken = "test-jwt-token";
        jwtUtil.setAuthToken(jwtToken); // Set the expected JWT token

        String expectedToken = jwtToken;
        String actualToken = tokenCache.getToken();

        assertEquals(expectedToken, actualToken);
        assertEquals(expectedToken, cache.get("tokens").get());
    }

    @Test
    public void testGetToken_WhenTokenInCache() {
        String cachedToken = "test-cached-token";
        cache.put("tokens", cachedToken);

        String expectedToken = cachedToken;
        String actualToken = tokenCache.getToken();

        assertEquals(expectedToken, actualToken);
    }
}



............
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.cache.caffeine.CaffeineCache;
import org.springframework.cache.caffeine.CaffeineCacheManager;
import uk.co.allianz.rap.lc.util.JwtUtil;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class TokenCacheTest {

    private TokenCache tokenCache;
    private CacheManager cacheManager;
    private Cache cache;
    private JwtUtil jwtUtil;

    @BeforeEach
    public void setup() {
        cacheManager = new CaffeineCacheManager("tokens");
        ((CaffeineCacheManager) cacheManager).setCaffeine(Caffeine.newBuilder()
                .expireAfterWrite(50, TimeUnit.SECONDS)
                .maximumSize(100)
                .build());
        cache = cacheManager.getCache("tokens");
        jwtUtil = new JwtUtil(); // Instantiate the JwtUtil class or use a real implementation
        tokenCache = new TokenCache();
        tokenCache.jwtUtil = jwtUtil;
        tokenCache.cacheManager = cacheManager;
    }

    @Test
    public void testGetToken_WhenTokenNotInCache() {
        String jwtToken = "test-jwt-token";
        jwtUtil.setAuthToken(jwtToken); // Set the expected JWT token

        String expectedToken = jwtToken;
        String actualToken = tokenCache.getToken();

        assertEquals(expectedToken, actualToken);
        assertEquals(expectedToken, cache.get("tokens").get());
    }

    @Test
    public void testGetToken_WhenTokenInCache() {
        String cachedToken = "test-cached-token";
        cache.put("tokens", cachedToken);

        String expectedToken = cachedToken;
        String actualToken = tokenCache.getToken();

        assertEquals(expectedToken, actualToken);
        assertEquals(expectedToken, cache.get("tokens").get());
    }
}


.////////////////////////////////////


import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.cache.caffeine.CaffeineCache;
import org.springframework.cache.caffeine.CaffeineCacheManager;
import uk.co.allianz.rap.lc.util.JwtUtil;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class TokenCacheTest {

    private TokenCache tokenCache;
    private CacheManager cacheManager;
    private Cache cache;
    private JwtUtil jwtUtil;
    private Logger logger;

    @BeforeEach
    public void setup() {
        cacheManager = new CaffeineCacheManager("tokens");
        cache = cacheManager.getCache("tokens");
        jwtUtil = new JwtUtil(); // Instantiate the JwtUtil class or use a real implementation
        logger = LoggerFactory.getLogger(TokenCache.class); // Use the appropriate logger instance
        tokenCache = new TokenCache();
        tokenCache.jwtUtil = jwtUtil;
        tokenCache.cacheManager = cacheManager;
        tokenCache.logger = logger;
    }

    @Test
    public void testRetrieveTokenFromDataSource() {
        String jwtToken = "test-jwt-token";
        jwtUtil.setAuthToken(jwtToken); // Set the expected JWT token

        String expectedToken = jwtToken;
        String actualToken = tokenCache.retrieveTokenFromDataSource();

        assertEquals(expectedToken, actualToken);
        assertEquals(expectedToken, cache.get("tokens").get());
    }
}

......
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.cache.caffeine.CaffeineCache;
import org.springframework.cache.caffeine.CaffeineCacheManager;
import uk.co.allianz.rap.lc.util.JwtUtil;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class TokenCacheTest {

    private TokenCache tokenCache;
    private CacheManager cacheManager;
    private Cache cache;
    private JwtUtil jwtUtil;
    private Logger logger;

    @BeforeEach
    public void setup() {
        cacheManager = new CaffeineCacheManager("tokens");
        cache = new CaffeineCache("tokens", Caffeine.newBuilder().build());
        cacheManager.initializeCaches(List.of(cache));
        jwtUtil = new JwtUtil(); // Instantiate the JwtUtil class or use a real implementation
        logger = LoggerFactory.getLogger(TokenCache.class); // Use the appropriate logger instance
        tokenCache = new TokenCache();
        tokenCache.jwtUtil = jwtUtil;
        tokenCache.cacheManager = cacheManager;
        tokenCache.logger = logger;
    }

    @Test
    public void testRetrieveTokenFromDataSource() {
        String expectedToken = "test-token";
        jwtUtil.setAuthToken(expectedToken); // Set the expected JWT token

        String result = tokenCache.retrieveTokenFromDataSource();

        assertEquals(expectedToken, result);
    }
}

...
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.cache.caffeine.CaffeineCache;
import org.springframework.cache.caffeine.CaffeineCacheManager;
import uk.co.allianz.rap.lc.util.JwtUtil;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class TokenCacheTest {

    private TokenCache tokenCache;
    private CacheManager cacheManager;
    private Cache cache;
    private JwtUtil jwtUtil;
    private Logger logger;

    @BeforeEach
    public void setup() {
        cacheManager = new CaffeineCacheManager("tokens");
        ((CaffeineCacheManager) cacheManager).setCaffeine(cacheBuilder -> cacheBuilder
                .expireAfterWrite(50, TimeUnit.SECONDS)
                .maximumSize(100));
        cache = cacheManager.getCache("tokens");
        jwtUtil = new JwtUtil(); // Instantiate the JwtUtil class or use a real implementation
        logger = LoggerFactory.getLogger(TokenCache.class); // Use the appropriate logger instance
        tokenCache = new TokenCache();
        tokenCache.jwtUtil = jwtUtil;
        tokenCache.cacheManager = cacheManager;
        tokenCache.logger = logger;
    }

    @Test
    public void testRetrieveTokenFromDataSource() {
        String jwtToken = "test-jwt-token";
        jwtUtil.setAuthToken(jwtToken); // Set the expected JWT token

        String result = tokenCache.retrieveTokenFromDataSource();

        assertEquals(jwtToken, result);
        assertEquals(jwtToken, cache.get("tokens").get());
    }
}


////
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.cache.caffeine.CaffeineCache;
import org.springframework.cache.caffeine.CaffeineCacheManager;
import uk.co.allianz.rap.lc.util.JwtUtil;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class TokenCacheTest {

    private TokenCache tokenCache;
    private CacheManager cacheManager;
    private Cache cache;
    private JwtUtil jwtUtil;
    private Logger logger;

    @BeforeEach
    public void setup() {
        cacheManager = new CaffeineCacheManager("tokens");
        ((CaffeineCacheManager) cacheManager).setCaffeine(Caffeine.newBuilder()
                .expireAfterWrite(50, TimeUnit.SECONDS)
                .maximumSize(100));
        cache = cacheManager.getCache("tokens");
        jwtUtil = new JwtUtil(); // Instantiate the JwtUtil class or use a real implementation
        logger = LoggerFactory.getLogger(TokenCache.class); // Use the appropriate logger instance
        tokenCache = new TokenCache();
        tokenCache.jwtUtil = jwtUtil;
        tokenCache.cacheManager = cacheManager;
        tokenCache.logger = logger;
    }

    @Test
    public void testGetToken_WhenTokenNotInCache() {
        String jwtToken = "test-jwt-token";
        String expectedToken = "test-token";
        jwtUtil.setAuthToken(jwtToken); // Set the expected JWT token

        String result = tokenCache.getToken();

        assertEquals(expectedToken, result);
        assertEquals(expectedToken, cache.get("tokens").get());
    }

    @Test
    public void testGetToken_WhenTokenInCache() {
        String cachedToken = "test-cached-token";
        cache.put("tokens", cachedToken);

        String result = tokenCache.getToken();

        assertEquals(cachedToken, result);
    }
}

....
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.cache.caffeine.CaffeineCache;
import org.springframework.cache.caffeine.CaffeineCacheManager;
import uk.co.allianz.rap.lc.util.JwtUtil;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class TokenCacheTest {

    private TokenCache tokenCache;
    private CacheManager cacheManager;
    private Cache cache;
    private JwtUtil jwtUtil;
    private Logger logger;

    @BeforeEach
    public void setup() {
        cacheManager = new CaffeineCacheManager("tokens");
        ((CaffeineCacheManager) cacheManager).setCaffeine(Caffeine.newBuilder()
                .expireAfterWrite(50, TimeUnit.SECONDS)
                .maximumSize(100)
                .build());
        cache = cacheManager.getCache("tokens");
        jwtUtil = new JwtUtil(); // Instantiate the JwtUtil class or use a real implementation
        logger = LoggerFactory.getLogger(TokenCache.class);
        tokenCache = new TokenCache();
        tokenCache.jwtUtil = jwtUtil;
        tokenCache.cacheManager = cacheManager;
        tokenCache.logger = logger;
    }

    @Test
    public void testGetToken_WhenTokenNotInCache() {
        String jwtToken = "test-jwt-token";
        String expectedToken = jwtToken;

        String result = tokenCache.getToken();

        assertEquals(expectedToken, result);
        assertEquals(expectedToken, cache.get("tokens").get());
    }

    @Test
    public void testGetToken_WhenTokenInCache() {
        String cachedToken = "test-cached-token";
        cache.put("tokens", cachedToken);

        String result = tokenCache.getToken();

        assertEquals(cachedToken, result);
    }
}


....
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.cache.caffeine.CaffeineCache;
import org.springframework.cache.caffeine.CaffeineCacheManager;
import uk.co.allianz.rap.lc.util.JwtUtil;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class TokenCacheTest {

    private TokenCache tokenCache;
    private CacheManager cacheManager;
    private Cache cache;
    private JwtUtil jwtUtil;

    @BeforeEach
    public void setup() {
        cacheManager = new CaffeineCacheManager("tokens");
        ((CaffeineCacheManager) cacheManager).setCaffeine(Caffeine.newBuilder()
                .expireAfterWrite(50, TimeUnit.SECONDS)
                .maximumSize(100));
        cache = cacheManager.getCache("tokens");
        jwtUtil = new JwtUtil(); // Instantiate the JwtUtil class or use a real implementation
        tokenCache = new TokenCache();
        tokenCache.jwtUtil = jwtUtil;
        tokenCache.cacheManager = cacheManager;
    }

    @Test
    public void testGetToken_WhenTokenNotInCache() {
        String jwtToken = "test-jwt-token";
        String expectedToken = jwtUtil.getAuthToken();
        cache.evict("tokens");

        String result = tokenCache.getToken();

        assertEquals(expectedToken, result);
        assertEquals(expectedToken, cache.get("tokens").get());
    }

    @Test
    public void testGetToken_WhenTokenInCache() {
        String cachedToken = "test-cached-token";
        cache.put("tokens", cachedToken);

        String result = tokenCache.getToken();

        assertEquals(cachedToken, result);
    }
}

///////
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import uk.co.allianz.rap.lc.util.JwtUtil;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class TokenCacheTest {

    private TokenCache tokenCache;
    private JwtUtil jwtUtil;

    @BeforeEach
    public void setup() {
        jwtUtil = new JwtUtil(); // Instantiate the JwtUtil class or use a real implementation
        tokenCache = new TokenCache();
        tokenCache.jwtUtil = jwtUtil;
    }

    @Test
    public void testRetrieveTokenFromDataSource() {
        String jwtToken = jwtUtil.getAuthToken();
        String result = tokenCache.retrieveTokenFromDataSource();
        assertEquals(jwtToken, result);
    }
}


.............
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.cache.caffeine.CaffeineCache;
import org.springframework.cache.caffeine.CaffeineCacheManager;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class TokenCacheTest {

    private TokenCache tokenCache;
    private CacheManager cacheManager;
    private Cache cache;

    @BeforeEach
    public void setup() {
        cacheManager = new CaffeineCacheManager();
        cacheManager.setCacheNames(List.of("tokens"));
        ((CaffeineCacheManager) cacheManager).setCaffeineSpec(Caffeine.newBuilder()
                .expireAfterWrite(50, TimeUnit.SECONDS)
                .maximumSize(100)
                .buildSpec());
        cache = cacheManager.getCache("tokens");
        tokenCache = new TokenCache();
        tokenCache.jwtUtil = new JwtUtil(); // Instantiate the JwtUtil class or use a real implementation
        tokenCache.cacheManager = cacheManager;
    }

    @Test
    public void testCacheToken() {
        String token = "test-token";
        tokenCache.cacheToken(token);

        assertEquals(token, cache.get("tokens").get());
    }
}

...
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.cache.caffeine.CaffeineCache;
import org.springframework.cache.caffeine.CaffeineCacheManager;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class TokenCacheTest {

    private TokenCache tokenCache;
    private CacheManager cacheManager;
    private Cache cache;

    @BeforeEach
    public void setup() {
        cacheManager = new CaffeineCacheManager();
        cacheManager.setCacheNames(List.of("tokens"));
        ((CaffeineCacheManager) cacheManager).setCaffeineSpec(Caffeine.newBuilder()
                .expireAfterWrite(50, TimeUnit.SECONDS)
                .maximumSize(100)
                .buildSpec());
        cache = cacheManager.getCache("tokens");
        tokenCache = new TokenCache();
        tokenCache.jwtUtil = new JwtUtil(); // Instantiate the JwtUtil class or use a real implementation
        tokenCache.cacheManager = cacheManager;
    }

    @Test
    public void testCacheToken() {
        String token = "test-token";
        tokenCache.cacheToken(token);

        CaffeineCache caffeineCache = (CaffeineCache) cache;
        Object cachedToken = caffeineCache.getNativeCache().getIfPresent("tokens");

        assertEquals(token, cachedToken);
    }
}

...
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.cache.caffeine.CaffeineCache;
import org.springframework.cache.caffeine.CaffeineCacheManager;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class TokenCacheTest {

    private TokenCache tokenCache;
    private CacheManager cacheManager;
    private Cache cache;

    @BeforeEach
    public void setup() {
        cacheManager = new CaffeineCacheManager();
        cacheManager.setCacheNames(List.of("tokens"));
        ((CaffeineCacheManager) cacheManager).setCaffeineSpec(Caffeine.newBuilder()
                .expireAfterWrite(50, TimeUnit.SECONDS)
                .maximumSize(100)
                .buildSpec());
        cache = cacheManager.getCache("tokens");
        tokenCache = new TokenCache();
        tokenCache.jwtUtil = new JwtUtil(); // Instantiate the JwtUtil class or use a real implementation
        tokenCache.cacheManager = cacheManager;
    }

    @Test
    public void testCacheToken() {
        String token = "test-token";

        tokenCache.cacheToken(token);

        String result = cache.get("tokens", String.class);
        assertEquals(token, result);
    }
}



...........................................................
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.cache.caffeine.CaffeineCache;
import org.springframework.cache.caffeine.CaffeineCacheManager;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class TokenCacheTest {

    private TokenCache tokenCache;
    private CacheManager cacheManager;
    private Cache cache;

    @BeforeEach
    public void setup() {
        cacheManager = new CaffeineCacheManager();
        cacheManager.setCacheNames(List.of("tokens"));
        ((CaffeineCacheManager) cacheManager).setCaffeineSpec(Caffeine.newBuilder()
                .expireAfterWrite(50, TimeUnit.SECONDS)
                .maximumSize(100)
                .buildSpec());
        cache = cacheManager.getCache("tokens");
        tokenCache = new TokenCache();
        tokenCache.jwtUtil = new JwtUtil(); // Instantiate the JwtUtil class or use a real implementation
        tokenCache.cacheManager = cacheManager;
    }

    @Test
    public void testGetToken_WhenTokenInCache() {
        String token = "test-token";
        cache.put("tokens", token);

        String result = tokenCache.getToken();

        assertEquals(token, result);
    }

    @Test
    public void testGetToken_WhenTokenNotInCache() {
        String token = "test-token";
        cache.evict("tokens");

        String result = tokenCache.getToken();

        assertEquals(token, result);
    }

    @Test
    public void testRetrieveTokenFromCache() {
        String correlationId = "test-correlation-id";
        String token = "test-token";
        cache.put("tokens", token);

        tokenCache.retrieveTokenFromCache(correlationId);

        // Add assertions for the expected behavior
    }
}

///////
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.cache.caffeine.CaffeineCache;
import org.springframework.cache.caffeine.CaffeineCacheManager;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;

public class TokenCacheTest {

    private TokenCache tokenCache;
    private CacheManager cacheManager;

    @BeforeEach
    public void setup() {
        cacheManager = new CaffeineCacheManager();
        ((CaffeineCacheManager) cacheManager).setCaffeine(Caffeine.newBuilder()
                .expireAfterWrite(50, TimeUnit.SECONDS)
                .maximumSize(100));

        tokenCache = new TokenCache();
        tokenCache.jwtUtil = new JwtUtil(); // Instantiate the JwtUtil class or use a real instance
        tokenCache.cacheManager = cacheManager;
    }

    @Test
    public void testGetToken_WhenTokenInCache() {
        String token = "test-token";
        Cache cache = cacheManager.getCache("tokens");
        cache.put("tokens", token);

        String result = tokenCache.getToken();

        assertEquals(token, result);
    }

    @Test
    public void testGetToken_WhenTokenNotInCache() {
        String token = "test-token";
        Cache cache = cacheManager.getCache("tokens");
        cache.clear();

        String result = tokenCache.getToken();

        assertEquals(token, result);
    }

    @Test
    public void testRetrieveTokenFromCache() {
        String correlationId = "test-correlation-id";
        Cache cache = cacheManager.getCache("tokens");
        cache.put("tokens", "test-token");

        tokenCache.retrieveTokenFromCache(correlationId);

        // Add assertions for the expected behavior
    }
}



................
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.cache.caffeine.CaffeineCache;
import org.springframework.cache.caffeine.CaffeineCacheManager;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;

public class TokenCacheTest {

    private TokenCache tokenCache;

    @BeforeEach
    public void setup() {
        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();
        context.register(CacheConfig.class);
        context.refresh();
        CacheManager cacheManager = context.getBean(CacheManager.class);
        tokenCache = new TokenCache();
        tokenCache.jwtUtil = new JwtUtil(); // Instantiate the JwtUtil class or use a mock if available
        tokenCache.cacheManager = cacheManager;
    }

    @Test
    public void testGetToken_WhenTokenInCache() {
        String token = "test-token";
        Cache cache = tokenCache.cacheManager.getCache("tokens");
        cache.put("tokens", token);

        String result = tokenCache.getToken();

        assertEquals(token, result);
    }

    @Test
    public void testGetToken_WhenTokenNotInCache() {
        String token = "test-token";
        Cache cache = tokenCache.cacheManager.getCache("tokens");
        cache.evict("tokens");

        String result = tokenCache.getToken();

        assertEquals(token, result);
    }

    @Test
    public void testRetrieveTokenFromCache() {
        String correlationId = "test-correlation-id";
        String token = "test-token";
        Cache cache = tokenCache.cacheManager.getCache("tokens");
        cache.put("tokens", token);

        tokenCache.retrieveTokenFromCache(correlationId);

        // Add assertions for the expected behavior
    }
}



//////////////////////////
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class TokenCacheTest {

    private JwtUtil jwtUtil;
    private CacheManager cacheManager;
    private TokenCache tokenCache;

    @BeforeEach
    public void setup() {
        jwtUtil = new JwtUtil();
        cacheManager = new CaffeineCacheManager();
        tokenCache = new TokenCache();
        tokenCache.jwtUtil = jwtUtil;
        tokenCache.cacheManager = cacheManager;
    }

    @Test
    public void testGetToken_WhenTokenInCache() {
        String token = "test-token";
        Cache cache = cacheManager.getCache("tokens");
        cache.put("tokens", token);

        String result = tokenCache.getToken();

        assertEquals(token, result);
    }

    @Test
    public void testGetToken_WhenTokenNotInCache() {
        String token = "test-token";
        String correlationId = "test-correlation-id";

        String result = tokenCache.getToken();
        String cachedToken = tokenCache.getToken(); // Fetch again to test caching

        assertEquals(token, result);
        assertEquals(token, cachedToken);
    }

    @Test
    public void testRetrieveTokenFromCache() {
        String correlationId = "test-correlation-id";
        String token = "test-token";
        Cache cache = cacheManager.getCache("tokens");
        cache.put("tokens", token);

        tokenCache.retrieveTokenFromCache(correlationId);
        // Add assertions for the expected behavior
    }
}



.....

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.cache.concurrent.ConcurrentMapCacheManager;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;

public class TokenCacheTest {

    private JwtUtil jwtUtil;
    private CacheManager cacheManager;
    private TokenCache tokenCache;

    @BeforeEach
    public void setup() {
        jwtUtil = new JwtUtil();
        cacheManager = new ConcurrentMapCacheManager("tokens");
        tokenCache = new TokenCache();
        tokenCache.jwtUtil = jwtUtil;
        tokenCache.cacheManager = cacheManager;
    }

    @Test
    public void testGetToken_WhenTokenInCache() {
        String token = "test-token";
        Cache cache = cacheManager.getCache("tokens");
        cache.put("tokens", token);

        String result = tokenCache.getToken();

        assertEquals(token, result);
    }

    @Test
    public void testGetToken_WhenTokenNotInCache() {
        String token = "test-token";
        jwtUtil.setAuthToken(token);

        String result = tokenCache.getToken();

        assertEquals(token, result);
    }

    @Test
    public void testRetrieveTokenFromCache() {
        String correlationId = "test-correlation-id";
        String token = "test-token";
        Cache cache = cacheManager.getCache("tokens");
        cache.put("tokens", token);

        tokenCache.retrieveTokenFromCache(correlationId);

        // Add assertions for the expected behavior
    }
}
.......
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.cache.caffeine.CaffeineCacheManager;
import org.springframework.cache.concurrent.ConcurrentMapCache;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;

public class TokenCacheTest {

    private TokenCache tokenCache;
    private CacheManager cacheManager;

    @BeforeEach
    public void setup() {
        ApplicationContext context = new AnnotationConfigApplicationContext(CacheConfig.class);
        cacheManager = context.getBean(CacheManager.class);
        tokenCache = new TokenCache();
        tokenCache.jwtUtil = new JwtUtil(); // Instantiate JwtUtil or use a stub/mock if needed
        tokenCache.cacheManager = cacheManager;
    }

    @Test
    public void testGetToken_WhenTokenInCache() {
        String token = "test-token";
        Cache cache = new ConcurrentMapCache("tokens");
        cache.put("tokens", token);
        cacheManager.getCache("tokens").put("tokens", token);

        String result = tokenCache.getToken();

        assertEquals(token, result);
    }

    @Test
    public void testGetToken_WhenTokenNotInCache() {
        String token = "test-token";
        String generatedToken = tokenCache.jwtUtil.getAuthToken();
        tokenCache.cacheManager.getCache("tokens").clear(); // Clear the cache

        String result = tokenCache.getToken();

        assertEquals(generatedToken, result);
        assertEquals(generatedToken, tokenCache.cacheManager.getCache("tokens").get("tokens").get());
    }

    @Test
    public void testRetrieveTokenFromCache() {
        String correlationId = "test-correlation-id";
        String token = "test-token";
        Cache cache = new ConcurrentMapCache("tokens");
        cache.put("tokens", token);
        cacheManager.getCache("tokens").put("tokens", token);

        tokenCache.retrieveTokenFromCache(correlationId);

        // Add assertions for the expected behavior
    }
}
......
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.cache.concurrent.ConcurrentMapCacheManager;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;

public class TokenCacheTest {

    private TokenCache tokenCache;

    private CacheManager cacheManager;

    @BeforeEach
    public void setup() {
        cacheManager = new ConcurrentMapCacheManager("tokens");
        tokenCache = new TokenCache();
        tokenCache.jwtUtil = new JwtUtil();
        tokenCache.cacheManager = cacheManager;
    }

    @Test
    public void testGetToken_WhenTokenInCache() {
        String token = "test-token";
        Cache cache = cacheManager.getCache("tokens");
        cache.put("tokens", token);

        String result = tokenCache.getToken();

        assertEquals(token, result);
    }

    @Test
    public void testGetToken_WhenTokenNotInCache() {
        String token = tokenCache.getToken();

        assertEquals("Generated Token :" + token, tokenCache.getToken());
    }

    @Test
    public void testRetrieveTokenFromCache() {
        String correlationId = "test-correlation-id";
        String token = "test-token";
        Cache cache = cacheManager.getCache("tokens");
        cache.put("tokens", token);

        tokenCache.retrieveTokenFromCache(correlationId);

        // Add assertions for the expected behavior
    }
}
......

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.cache.caffeine.CaffeineCacheManager;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;

public class TokenCacheTest {

    private TokenCache tokenCache;

    @BeforeEach
    public void setup() {
        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();
        context.register(CacheConfig.class);
        context.refresh();
        CacheManager cacheManager = context.getBean(CacheManager.class);
        tokenCache = new TokenCache();
        tokenCache.jwtUtil = new JwtUtil(); // Instantiate the JwtUtil class or use a mock if available
        tokenCache.cacheManager = cacheManager;
    }

    @Test
    public void testGetToken_WhenTokenInCache() {
        String token = "test-token";
        Cache cache = tokenCache.cacheManager.getCache("tokens");
        cache.put("tokens", token);

        String result = tokenCache.getToken();

        assertEquals(token, result);
    }

    @Test
    public void testGetToken_WhenTokenNotInCache() {
        String token = "test-token";
        Cache cache = tokenCache.cacheManager.getCache("tokens");
        cache.evict("tokens");

        String result = tokenCache.getToken();

        assertEquals(token, result);
    }

    @Test
    public void testRetrieveTokenFromCache() {
        String correlationId = "test-correlation-id";
        String token = "test-token";
        Cache cache = tokenCache.cacheManager.getCache("tokens");
        cache.put("tokens", token);

        tokenCache.retrieveTokenFromCache(correlationId);

        // Add assertions for the expected behavior
    }
}




...............................



 import org.springframework.web.context.request.RequestAttributes;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;
import javax.servlet.http.HttpServletRequest;

public class CorrelationIdExtractor {
    public static String extractCorrelationId() {
        RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes();
        if (requestAttributes instanceof ServletRequestAttributes) {
            ServletRequestAttributes servletRequestAttributes = (ServletRequestAttributes) requestAttributes;
            HttpServletRequest request = (HttpServletRequest) servletRequestAttributes.getRequest();
            String correlationId = request.getHeader("X-Correlation-ID");
            if (correlationId != null) {
                return correlationId;
            }
        }
        return "";
    }
}

....
import org.springframework.web.context.request.RequestAttributes;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;
import javax.servlet.http.HttpServletRequest;

public class CorrelationIdExtractor {
    public static String extractCorrelationId() {
        RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes();
        if (requestAttributes instanceof ServletRequestAttributes) {
            HttpServletRequest request = ((ServletRequestAttributes) requestAttributes).getRequest();
            String correlationId = request.getHeader("X-Correlation-ID");
            if (correlationId != null) {
                return correlationId;
            }
        }
        return "";
    }
}

......
<dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>javax.servlet-api</artifactId>
        <version>4.0.1</version>
        <scope>provided</scope>
    </dependency>
.........
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;
import javax.servlet.http.HttpServletRequest;

public class CorrelationIdExtractor {
    public static String extractCorrelationId() {
        HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
        String correlationId = request.getHeader("X-Correlation-ID");
        return correlationId != null ? correlationId : "";
    }
}




import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class MyController {
    @GetMapping("/my-endpoint")
    public String myEndpoint() {
        String correlationId = CorrelationIdExtractor.extractCorrelationId();

        // Use the extracted correlationId as needed
        // ...
        
        return "Response";
    }
}

.................................................................
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class YourController {

    @GetMapping("/your-endpoint")
    public String yourEndpointMethod(@RequestHeader("Correlation-ID") String correlationId) {
        // Use the correlationId value for further processing
        // ...
        return "Correlation ID: " + correlationId;
    }
}
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,



@Configuration
@EnableCaching
public class CacheConfig {
    @Bean
    public CacheManager cacheManager() {
        CaffeineCacheManager cacheManager = new CaffeineCacheManager();
        cacheManager.setCaffeine(caffeineCacheBuilder());
        return cacheManager;
    }

    @Bean
    public Caffeine<Object, Object> caffeineCacheBuilder() {
        return Caffeine.newBuilder()
                .expireAfterWrite(1, TimeUnit.MINUTES) // Set the expiration time for the tokens
                .maximumSize(100); // Set the maximum number of tokens to store in the cache
    }
}







@Component
public class TokenCache {
	private static final String TOKEN_CACHE_NAME = "tokens";

	@Autowired
	private CacheManager cacheManager;

	@Cacheable(value = TOKEN_CACHE_NAME)
	public String getToken() {
		// Retrieve the token from the cache or data source
		Cache cache = cacheManager.getCache(TOKEN_CACHE_NAME);
		if (cache != null) {
			Cache.ValueWrapper valueWrapper = cache.get(TOKEN_CACHE_NAME);
			if (valueWrapper != null) {
				return (String) valueWrapper.get();
			}
		}

		String tokenFromDataSource = retrieveTokenFromDataSource();
		cacheToken(tokenFromDataSource); // Cache the token for future use
		return tokenFromDataSource;
	}

	private String retrieveTokenFromDataSource() {
		// Perform the actual retrieval of the token from the data source
		// This can involve querying a database, making an API call, or any other
		// necessary logic
		// Return the retrieved token
		return "token-from-data-source";
	}

	private void cacheToken(String token) {
		Cache cache = cacheManager.getCache(TOKEN_CACHE_NAME);
		if (cache != null) {
			cache.put(TOKEN_CACHE_NAME, token);
		}
	}
}






import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cache.annotation.EnableCaching;

@SpringBootApplication
@EnableCaching

public class Demo1Application {

	public static void main(String[] args) {
		SpringApplication.run(Demo1Application.class, args);

	}

}









@Autowired
private TokenCache tokenCache;

public void retrieveTokenFromCache() {
    String token = tokenCache.getToken();
    System.out.println("Token from cache: " + token);
}




////////////////////////////////////////////////////////////////////////







		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>30.1-jre</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-cache</artifactId>
		</dependency>
		<dependency>
			<groupId>com.github.ben-manes.caffeine</groupId>
			<artifactId>caffeine</artifactId>
			<version>3.0.4</version>
		</dependency>




package com.example.demo;
import com.github.benmanes.caffeine.cache.Caffeine;

import java.util.concurrent.TimeUnit;

import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.cache.caffeine.CaffeineCacheManager;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
@EnableCaching
public class CacheConfig {
    @Bean
    public CacheManager cacheManager() {
        CaffeineCacheManager cacheManager = new CaffeineCacheManager();
        cacheManager.setCaffeine(caffeineCacheBuilder());
        return cacheManager;
    }

    @Bean
    public Caffeine<Object, Object> caffeineCacheBuilder() {
        return Caffeine.newBuilder()
                .expireAfterWrite(30, TimeUnit.MINUTES) // Set the expiration time for the tokens
                .maximumSize(100); // Set the maximum number of tokens to store in the cache
    }
}





package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cache.annotation.EnableCaching;

@SpringBootApplication
@EnableCaching

public class Demo1Application {

	public static void main(String[] args) {
		SpringApplication.run(Demo1Application.class, args);
	}

}







package com.example.demo;

import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Component;

@Component
public class TokenCache {
    @Cacheable(value = "tokens", key = "#jwtToken")
    public String getToken(String jwtToken) {
        // Retrieve the token from the data source or perform any necessary processing
        // This method will only be executed if the token is not already present in the cache
        return retrieveTokenFromDataSource(jwtToken);
    }

    private String retrieveTokenFromDataSource(String jwtToken) {
		return jwtToken;
        // Perform the actual token retrieval from the data source
        // Return the token
    }
}


.......................................................................................................................................................

package com.example.demo;

import com.github.benmanes.caffeine.cache.Caffeine;

import java.util.concurrent.TimeUnit;

import org.springframework.cache.CacheManager;
import org.springframework.cache.caffeine.CaffeineCacheManager;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;


@Configuration
public class CacheConfig {
	@Bean
	public CacheManager cacheManager() {
		CaffeineCacheManager cacheManager = new CaffeineCacheManager();
		cacheManager.setCaffeine(caffeineCacheBuilder());
		return cacheManager;
	}

	@Bean
	public Caffeine<Object, Object> caffeineCacheBuilder() {
		return Caffeine.newBuilder().expireAfterWrite(30, TimeUnit.MINUTES) // Set the expiration time for the tokens
				.maximumSize(100); // Set the maximum number of tokens to store in the cache
	}
}

//
//import com.google.common.cache.CacheBuilder;
//import org.springframework.cache.CacheManager;
//import org.springframework.cache.annotation.EnableCaching;
////import org.springframework.cache.guava.GuavaCacheManager;
//import org.springframework.cache.caffeine.CaffeineCacheManager;
//import org.springframework.cache.guava.GuavaCacheManager;
//
//import org.springframework.context.annotation.Bean;
//import org.springframework.context.annotation.Configuration;
//
//import java.util.concurrent.TimeUnit;
//
//@Configuration
//@EnableCaching
//public class CacheConfig {
//    @Bean
//    public CacheManager cacheManager() {
//        GuavaCacheManager cacheManager = new GuavaCacheManager();
//        cacheManager.setCacheBuilder(guavaCacheBuilder());
//        return cacheManager;
//    }
//
//    @Bean
//    public CacheBuilder<Object, Object> guavaCacheBuilder() {
//        return CacheBuilder.newBuilder()
//                .expireAfterWrite(30, TimeUnit.MINUTES) // Set the expiration time for the tokens
//                .maximumSize(100); // Set the maximum number of tokens to store in the cache
//    }
//}



















......


package com.example.demo;

import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Component;

import com.google.common.cache.CacheBuilder;
import com.google.common.cache.CacheLoader;
import com.google.common.cache.LoadingCache;

import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;

@Component
public class TokenCache {
  @Cacheable(value = "tokens", key = "#jwtToken")
    public String getToken(String jwtToken) {
        // Retrieve the token from the cache or data source
        String cachedToken = retrieveTokenFromCache(jwtToken);
        if (cachedToken != null) {
            return cachedToken; // Return the token from the cache
        }

        String tokenFromDataSource = retrieveTokenFromDataSource(jwtToken);
        cacheToken(jwtToken, tokenFromDataSource); // Cache the token for future use
        return tokenFromDataSource;
    }

    private String retrieveTokenFromCache(String jwtToken) {
		return jwtToken;
        // Retrieve the token from the cache if it exists
        // Return null if the token is not found in the cache
    }

    private String retrieveTokenFromDataSource(String jwtToken) {
		return jwtToken;
        // Perform the actual retrieval of the JWT token from the data source
        // This can involve querying a database, making an API call, or any other necessary logic
        // Return the retrieved token
    }

    private void cacheToken(String jwtToken, String token) {
        // Cache the token using the cache manager
    }
}

//@Component
//public class TokenCache {
//    @Cacheable(value = "tokens", key = "#jwtToken")
//    public String getToken(String jwtToken) {
//        // Retrieve the token from the data source or perform any necessary processing
//        // This method will only be executed if the token is not already present in the cache
//        return retrieveTokenFromDataSource(jwtToken);
//    }
//
//    private String retrieveTokenFromDataSource(String jwtToken) {
//		return jwtToken;
//        // Perform the actual token retrieval from the data source
//        // Return the token
//    }
//}
//

/*
 * In this example, the getToken method first checks if the token exists in the
 * cache. If it does, the cached token is returned. If the token is not found in
 * the cache, it calls the retrieveTokenFromDataSource method to retrieve the
 * token from the data source. Once the token is obtained, it is cached using
 * the cache manager before being returned.
 * 
 * The retrieveTokenFromDataSource method should contain the logic to retrieve
 * the token from your specific data source. This can include querying a
 * database, making an API call, or any other relevant operations. You will need
 * to implement this method according to your specific requirements and the
 * mechanism you use to store and retrieve the tokens.
 */

//private String retrieveTokenFromDataSource(String jwtToken) {
//    // Retrieve the token from the data source based on the jwtToken parameter
//    // You might query a database, make an API call, or perform any necessary operations to obtain the token
//    
//    String token = ... // Retrieve the token from the data source
//    
//    return token;
//}

//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.stereotype.Component;
//
//@Component
//public class TokenCache {
//    private final TokenRepository tokenRepository;
//
//    @Autowired
//    public TokenCache(TokenRepository tokenRepository) {
//        this.tokenRepository = tokenRepository;
//    }
//
//    @Cacheable(value = "tokens", key = "#jwtToken")
//    public String getToken(String jwtToken) {
//        return retrieveTokenFromDataSource(jwtToken);
//    }
//
//    private String retrieveTokenFromDataSource(String jwtToken) {
//        // Retrieve the token from the data source, such as a database
//        // You can use your own implementation or an ORM like Spring Data JPA
//
//        // Example: Assuming you have a TokenRepository to fetch the token from a database
//        Token token = tokenRepository.findByJwtToken(jwtToken);
//        return token != null ? token.getTokenValue() : null;
//    }
//}

........................................
111111111111

import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Component;

@Component
public class TokenCache {
    @Cacheable(value = "tokens", key = "#jwtToken")
    public String getToken(String jwtToken) {
        String cachedToken = retrieveTokenFromCache(jwtToken);
        if (cachedToken != null) {
            // Token is available in the cache
            System.out.println("Retrieved token from the cache: " + cachedToken);
            return cachedToken;
        }

        // Token not found in the cache, generate a new token
        String newToken = generateNewToken(jwtToken);
        System.out.println("Generated new token: " + newToken);

        // Store the new token in the cache
        cacheToken(jwtToken, newToken);

        return newToken;
    }

    private String retrieveTokenFromCache(String jwtToken) {
        // Retrieve the token from the cache implementation
        // Return null if the token is not found in the cache
        // Implement this based on your chosen cache implementation
        return null;
    }

    private String generateNewToken(String jwtToken) {
        // Perform the actual token generation logic
        // Implement this based on your requirements
        return "Generated Token";
    }

    private void cacheToken(String jwtToken, String token) {
        // Store the token in the cache implementation
        // Implement this based on your chosen cache implementation
    }
}
........

import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Component;

@Component
public class TokenCache {
    @Cacheable(value = "tokens", key = "#jwtToken")
    public String getToken(String jwtToken) {
        // This log statement is just for demonstration purposes
        System.out.println("Retrieving token from the cache or generating a new token...");

        // This block represents the actual retrieval logic
        String cachedToken = retrieveTokenFromCache(jwtToken);
        if (cachedToken != null) {
            // Token found in the cache, return it
            return cachedToken;
        } else {
            // Token not found in the cache, generate a new token
            String newToken = generateNewToken();
            cacheToken(jwtToken, newToken); // Store the new token in the cache
            return newToken;
        }
    }

    private String retrieveTokenFromCache(String jwtToken) {
        // Retrieve the token from the cache based on the provided jwtToken
        // Implement your cache retrieval logic here
        // If token is found, return it; otherwise, return null
        return null; // Placeholder for cache retrieval logic
    }

    private String generateNewToken() {
        // Generate a new token
        // Implement your token generation logic here
        return "Generated Token"; // Placeholder for token generation logic
    }

    private void cacheToken(String jwtToken, String token) {
        // Cache the token using the provided jwtToken as the cache key
        // Implement your cache storage logic here
    }
}
...............
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Component;

@Component
public class TokenCache {
    @Cacheable(value = "tokens", key = "#jwtToken")
    public String getToken(String jwtToken) {
        // This log statement is just for demonstration purposes
        System.out.println("Retrieving token from the cache or generating a new token...");

        // Retrieve the token from the cache if it exists
        String cachedToken = getCachedToken(jwtToken);
        if (cachedToken != null) {
            System.out.println("Retrieved token from cache: " + cachedToken);
            return cachedToken;
        }

        // If the token is not present in the cache, generate a new token
        String newToken = generateToken();
        System.out.println("Generated new token: " + newToken);

        // Store the new token in the cache
        cacheToken(jwtToken, newToken);

        return newToken;
    }

    private String getCachedToken(String jwtToken) {
        // Retrieve the token from the cache based on the given jwtToken
        // Return null if the token is not present in the cache
        // Implement the cache retrieval logic here
        return null;
    }

    private String generateToken() {
        // Perform the actual token generation
        // Implement the token generation logic here
        return "Generated Token";
    }

    private void cacheToken(String jwtToken, String token) {
        // Store the token in the cache based on the given jwtToken
        // Implement the cache storage logic here
    }
}
