import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

@WebMvcTest(ImportClientController.class)
public class ImportClientControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Test
    public void testImportClient1_NullData() throws Exception {
        // Given
        String jsonData = null;

        // When-Then
        mockMvc.perform(post("/import-client")
                .contentType(MediaType.APPLICATION_JSON)
                .content(jsonData))
                .andExpect(status().isBadRequest());
    }
}

//
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import uk.co.allianz.rap.lc.model.request.importclient.Client;
import uk.co.allianz.rap.lc.model.request.importclient.ImportClientRequest;

@WebMvcTest(ImportClientController.class)
public class ImportClientControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private Gson gson;

    @MockBean
    private ObjectMapper objectMapper;

    @Test
    public void testImportClient1_Success() throws Exception {
        // Given
        String jsonData = "{\"client\": {\"name\": \"John Doe\"}, \"inspection\": \"data\"}";
        ImportClientRequest importClientRequest = new ImportClientRequest();
        Client client = new Client();
        client.setName("John Doe");
        importClientRequest.setClient(client);

        // Mock the behavior of ObjectMapper and Gson
        when(objectMapper.readTree(anyString())).thenReturn(new ObjectMapper().readTree(jsonData));
        when(gson.toJson(any(ImportClientRequest.class))).thenReturn("{\"client\":{\"name\":\"John Doe\"}}");

        // When-Then
        mockMvc.perform(post("/import-client")
                .contentType(MediaType.APPLICATION_JSON)
                .content(jsonData))
                .andExpect(status().isOk());
    }
}


//
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import uk.co.allianz.rap.lc.model.request.importclient.Client;
import uk.co.allianz.rap.lc.model.request.importclient.ImportClientRequest;

// Add the necessary annotations
@SpringBootTest
@ContextConfiguration(classes = {ImportClientController.class})
@WebMvcTest
public class ImportClientControllerTest {

    @Autowired
    private MockMvc mockMvc;

    // Sample JSON data for testing
    private static final String SAMPLE_JSON_DATA = "{\"client\": {\"name\": \"John Doe\"}, \"inspection\": {\"field\": \"value\"}}";

    @Test
    public void testImportClient1_ValidData_Success() throws Exception {
        // Perform the POST request to "/import-client"
        mockMvc.perform(post("/import-client")
                .contentType(MediaType.APPLICATION_JSON)
                .content(SAMPLE_JSON_DATA))
                .andExpect(status().isOk());
        // Add more assertions as needed based on the expected behavior
    }

    @Test
    public void testImportClient1_NullData_BadRequest() throws Exception {
        // Perform the POST request with null data
        mockMvc.perform(post("/import-client")
                .contentType(MediaType.APPLICATION_JSON)
                .content((String) null))
                .andExpect(status().isBadRequest());
        // Add more assertions as needed based on the expected behavior
    }

    @Test
    public void testImportClient1_InvalidData_BadRequest() throws Exception {
        // Sample JSON data with invalid format to trigger an exception
        String invalidData = "invalid_json_data";

        // Perform the POST request with invalid data
        mockMvc.perform(post("/import-client")
                .contentType(MediaType.APPLICATION_JSON)
                .content(invalidData))
                .andExpect(status().isBadRequest());
        // Add more assertions as needed based on the expected behavior
    }

    // Add more test cases as needed to cover different scenarios and edge cases
}


//
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.google.gson.Gson;
import com.google.json.JsonSanitizer;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(ImportClientController.class)
@ContextConfiguration(classes = {ImportClientController.class})
public class ImportClientControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private Gson gson;

    @Autowired
    private ObjectMapper objectMapper;

    private String sampleJsonData;

    @BeforeEach
    public void setUp() {
        // Initialize sample JSON data for testing
        sampleJsonData = "{\"client\": {\"name\": \"John Doe\"}, \"inspection\": \"some data\"}";
    }

    @Test
    public void testImportClient1_Success() throws Exception {
        // Remove the "inspection" field from the JSON string
        JsonNode rootNode = objectMapper.readTree(sampleJsonData);
        ((ObjectNode) rootNode).remove("inspection");
        String jsonDataWithoutInspection = rootNode.toString();

        String sanitizedData = JsonSanitizer.sanitize(jsonDataWithoutInspection);

        ImportClientRequest expectedRequest = objectMapper.readValue(sanitizedData, ImportClientRequest.class);

        // Perform the actual API call
        mockMvc.perform(MockMvcRequestBuilders.post("/import-client")
                .contentType(MediaType.APPLICATION_JSON)
                .content(sampleJsonData))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.client.name").value(expectedRequest.getClient().getName()));
    }

    @Test
    public void testImportClient1_NullData() throws Exception {
        // Perform the API call with null JSON data
        mockMvc.perform(MockMvcRequestBuilders.post("/import-client")
                .contentType(MediaType.APPLICATION_JSON)
                .content((String) null))
                .andExpect(status().isBadRequest())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON));
    }

    @Test
    public void testImportClient1_InvalidData() throws Exception {
        // Perform the API call with invalid JSON data
        String invalidData = "Invalid JSON Data";
        mockMvc.perform(MockMvcRequestBuilders.post("/import-client")
                .contentType(MediaType.APPLICATION_JSON)
                .content(invalidData))
                .andExpect(status().isBadRequest())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON));
    }
}




//
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

public class ImportClientControllerTest {

    // Instantiate the actual controller to be tested
    private ImportClientController importClientController = new ImportClientController();

    @Test
    public void testImportClient1() {
        // Sample JSON data for testing
        String jsonData = "{\"client\":{\"name\":\"John Doe\"},\"inspection\":{\"type\":\"some_type\"}}";

        // Perform the test
        ResponseEntity<String> responseEntity = importClientController.importClient1(jsonData);

        // Assertions
        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        assertNotNull(responseEntity.getBody());

        // Since the JSON sanitization is not being tested here, you can perform some basic checks
        assertFalse(responseEntity.getBody().contains("inspection"));
        assertTrue(responseEntity.getBody().contains("John Doe"));
    }

    @Test
    public void testImportClient1WithNullData() {
        // Test with null JSON data
        ResponseEntity<String> responseEntity = importClientController.importClient1(null);

        // Assertions
        assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());
        assertTrue(responseEntity.getBody().contains("JSON Data is null"));
    }

    @Test
    public void testImportClient1WithInvalidData() {
        // Test with invalid JSON data
        String invalidData = "Invalid JSON data";
        ResponseEntity<String> responseEntity = importClientController.importClient1(invalidData);

        // Assertions
        assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());
        assertTrue(responseEntity.getBody().contains("Failed to parse JSON"));
    }
}



<!-- JUnit 5 dependencies -->
<dependency>
    <groupId>org.junit.jupiter</groupId>
    <artifactId>junit-jupiter-api</artifactId>
    <version>5.8.0</version>
    <scope>test</scope>
</dependency>

//
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;
import com.google.json.JsonSanitizer;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class ImportClientControllerTest {

    private ImportClientController importClientController;
    private Gson gson;
    private ObjectMapper objectMapper;

    @BeforeEach
    public void setUp() {
        gson = new Gson();
        objectMapper = new ObjectMapper();
        importClientController = new ImportClientController(gson, objectMapper);
    }

    @Test
    public void testImportClient1_Success() throws Exception {
        // Given
        ImportClientRequest request = new ImportClientRequest();
        // Set up your request data here

        String jsonData = gson.toJson(request);

        // When
        ResponseEntity<String> response = importClientController.importClient1(jsonData);

        // Then
        assertEquals(HttpStatus.OK, response.getStatusCode());
        // Add more assertions to verify the response content
    }

    @Test
    public void testImportClient1_NullData() {
        // Given
        String jsonData = null;

        // When
        ResponseEntity<String> response = importClientController.importClient1(jsonData);

        // Then
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        // Add more assertions to verify the response content
    }

    @Test
    public void testImportClient1_Exception() {
        // Given
        String jsonData = "invalid_json"; // Invalid JSON data

        // When
        ResponseEntity<String> response = importClientController.importClient1(jsonData);

        // Then
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        // Add more assertions to verify the response content
    }
}

//////////////////////
package uk.co.allianz.rap.lc.rest;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.google.gson.Gson;
import com.google.json.JsonSanitizer;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import uk.co.allianz.rap.lc.model.request.importclient.ImportClientRequest;

@Slf4j
@RestController
public class ImportClientController {

    @Autowired
    private Gson gson;

    @Autowired
    private ObjectMapper objectMapper;

    //Extracting fields and data from the "data model" sent from loss-control-adapter
    //and building the API request: ImportClient
    @PostMapping("/import-client")
    public ResponseEntity<String> importClient1(@RequestBody String jsonData) {
        try {
            if (jsonData == null) {
                throw new IllegalArgumentException("JSON Data is null");
            }

            // Remove the "inspection" field from the JSON string
            JsonNode rootNode = new ObjectMapper().readTree(jsonData);
            ((ObjectNode) rootNode).remove("inspection");
            String jsonDataWithoutInspection = rootNode.toString();

            String sanitizedData = JsonSanitizer.sanitize(jsonDataWithoutInspection);

            ImportClientRequest importClientRequest = objectMapper.readValue(sanitizedData, ImportClientRequest.class);

            // access the data using the POJO classes
            log.info("Client Name:" + importClientRequest.getClient().getName());


            String processedJson = gson.toJson(importClientRequest);
            return ResponseEntity.ok(processedJson);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(e.getMessage());
        }
    }
}

......................

//Added 2 Location and inspection

{
    "inspection":{
        "PolicyNumber":"1"
    },
    "divisionLookupID": "AZ_UK",
    "client": {
        "LookupID": "27105",
        "ContactFirstName": "Client Contact First Name",
        "ContactLastName": "Client Contact Last Name",
        "PolicyNumber": "AS-86587667",
        "Name": "MW Ultan Client Name",
        "Phone": "client Phone",
        "Email": "email@client.com",
        "Address": {
            "Country": "GB",
            "OverseasTerritories": "England",
            "Street1": "C.A. street 1",
            "Street2": "C.A street 2",
            "City": "C.A. City",
            "Region1": "C.A. region1",
            "Region2": "C.A. region2",
            "Region3": "C.A. region3",
            "Region4": "C.A. region4",
            "ZipCode": "C.A. Post Code"
        },
        "Agent": {
            "AgencyCode": "12345678",
            "AgencyName": "MW Ultan Agent 2",
            "AgentCode": "1234",
            "AgentName": "MW Ultan The Only Agent",
            "Email": "ultan@agency.com",
            "FaxNumber": "004416107890",
            "PhoneNumber": "0044316107892",
            "Address": {
                "Country": "GB",
                "Street1": "Agent Street1",
                "Street2": "Agent Street2",
                "City": "Norwich",
                "Region1": "Region1",
                "Region2": "Region2",
                "Region3": "Region3",
                "Region4": "Region4",
                "ZipCode": "PostCode"
            },
            "AgentType": "Broker"
        },
        "Underwriter": {
            "Company": "MW Underwriter company",
            "Email": "ultan@underwriter.com",
            "FirstName": "Underwriter-Ultan",
            "LastName": "Underwriter-McPadden",
            "PhoneNumber": "00441234567",
            "UnderwriterCode": "12345"
        },
        "Locations": [
            {
                "LookupID": "29647",
                "Name": "MW LocationTestUltan API New",
                "PolicyNumber": "API9876567",
                "PolicyEffectiveDate": "2023-03-28T15:08:58.889075+01:00",
                "PolicyExpirationDate": "2023-03-28T15:08:58.889075+01:00",
                "PolicyRenewalDate": "2023-03-28T15:08:58.889075+01:00",
                "Address": {
                    "Country": "GB",
                    "Street1": "L.A. street 1",
                    "Street2": "L.A. street 2",
                    "City": "London",
                    "Region1": "L.A Region1",
                    "Region2": "L.A Region2",
                    "Region3": "L.A Region3",
                    "Region4": "L.A Region4",
                    "ZipCode": "L.A PostCode"
                },
                "OriginalEffectiveDate": "2023-03-28T15:08:58.8820749+01:00",
                "EffectiveDate": "2023-03-28T15:08:58.8820749+01:00",
                "ExpirationDate": "2023-03-28T15:08:58.8820749+01:00",
                "RenewalDate": "2023-03-28T15:08:58.8820749+01:00",
                "LastInspectedDate": "2023-03-28T15:08:58.8820749+01:00",
                "genericFields": [
                    {
                        "key": "0.ISIC+Code",
                        "text": "",
                        "genericFieldValueType": 0
                    }
                ],
                "Coverages": [
                    {
                        "CoverageTypeLookup": "PD_TIV",
                        "GenericFields": [
                            {
                                "Number": "50000",
                                "Key": "01. PD Building",
                                "GenericFieldValueType": 1
                            },
                            {
                                "Number": "40000",
                                "Key": "02. PD Content",
                                "GenericFieldValueType": 1
                            },
                            {
                                "Number": "30000",
                                "Key": "03. Stock & Supply",
                                "GenericFieldValueType": 1
                            },
                            {
                                "Number": "20000",
                                "Key": "04. PD Other",
                                "GenericFieldValueType": 1
                            },
                            {
                                "Text": "Machinary",
                                "Key": "05. PD Other Description",
                                "GenericFieldValueType": 0
                            },
                            {
                                "Number": "140000",
                                "Key": "06. TIV PD",
                                "GenericFieldValueType": 1
                            },
                            {
                                "Number": "10000",
                                "Key": "07. TIV BI",
                                "GenericFieldValueType": 1
                            },
                            {
                                "Number": "12",
                                "Key": "08. BI Base Period (Months)",
                                "GenericFieldValueType": 1
                            },
                            {
                                "Number": "150000",
                                "Key": "09. TIV (PD + BI )",
                                "GenericFieldValueType": 1
                            }
                        ]
                    },
                    {
                        "CoverageTypeLookup": "CC_LIAB",
                        "GenericFields": [
                            {
                                "Number": "5000",
                                "Key": "Limit of Liability",
                                "GenericFieldValueType": 1
                            },
                            {
                                "Number": "10",
                                "Key": "Number of Employees",
                                "GenericFieldValueType": 1
                            },
                            {
                                "Number": "5000",
                                "Key": "Total Turnover",
                                "GenericFieldValueType": 1
                            }
                        ]
                    }
                ],
                "Contact": {
                    "CellPhone": "L. Contact Cellphone",
                    "CompanyName": "L. Contact CompanyName",
                    "Email": "L. Contact Email",
                    "FirstName": "L. Contact First Name",
                    "HomePhone": "L. Contact HomePhone",
                    "LastName": "L. Contact LastName",
                    "Occupation": "L. Contact Occupation",
                    "UseCompanyName": true,
                    "WorkPhone": "L. Contact WorkPhone",
                    "Location": "L. Contact Location"
                }
            },
            // Add one more location here
            {
                "LookupID": "12345",
                "Name": "MW Second Location",
                "PolicyNumber": "API9876568",
                "PolicyEffectiveDate": "2023-03-29T15:08:58.889075+01:00",
                "PolicyExpirationDate": "2023-03-29T15:08:58.889075+01:00",
                "PolicyRenewalDate": "2023-03-29T15:08:58.889075+01:00",
                "Address": {
                    "Country": "GB",
                    "Street1": "Second street 1",
                    "Street2": "Second street 2",
                    "City": "London",
                    "Region1": "Second Region1",
                    "Region2": "Second Region2",
                    "Region3": "Second Region3",
                    "Region4": "Second Region4",
                    "ZipCode": "Second PostCode"
                },
                "OriginalEffectiveDate": "2023-03-29T15:08:58.8820749+01:00",
                "EffectiveDate": "2023-03-29T15:08:58.8820749+01:00",
                "ExpirationDate": "2023-03-29T15:08:58.8820749+01:00",
                "RenewalDate": "2023-03-29T15:08:58.8820749+01:00",
                "LastInspectedDate": "2023-03-29T15:08:58.8820749+01:00",
                "genericFields": [
                    {
                        "key": "0.ISIC+Code",
                        "text": "",
                        "genericFieldValueType": 0
                    }
                ],
                "Coverages": [
                    {
                        "CoverageTypeLookup": "PD_TIV",
                        "GenericFields": [
                            {
                                "Number": "50000",
                                "Key": "01. PD Building",
                                "GenericFieldValueType": 1
                            }
                            // ... other fields
                        ]
                    }
                    // Add other coverages if needed
                ],
                "Contact": {
                    "CellPhone": "Second Contact Cellphone"
                    // ... other fields
                }
            }
        ]
    }
}


//////////////////////////////////
{
  "divisionLookupID" : "AZ_UK",
  "client" : {
    "LookupID" : "C008032993",
    "ContactFirstName" : null,
    "ContactLastName" : null,
    "PolicyNumber" : "SP26853148",
    "Name" : "CLIENT NEW BR",
    "Phone" : null,
    "Email" : null,
    "Address" : {
      "Country" : "United Kingdom",
      "OverseasTerritories" : null,
      "Street1" : null,
      "Street2" : null,
      "City" : null,
      "Region1" : null,
      "Region2" : null,
      "Region3" : null,
      "Region4" : null,
      "ZipCode" : null
    },
    "Agent" : {
      "AgencyCode" : "22576",
      "AgencyName" : "Arthur J. Gallagher",
      "AgentCode" : "13332",
      "AgentName" : null,
      "Email" : null,
      "FaxNumber" : null,
      "PhoneNumber" : null,
      "Address" : {
        "Country" : "United Kingdom",
        "OverseasTerritories" : null,
        "Street1" : null,
        "Street2" : null,
        "City" : null,
        "Region1" : null,
        "Region2" : null,
        "Region3" : null,
        "Region4" : null,
        "ZipCode" : null
      },
      "AgentType" : "Broker"
    },
    "Underwriter" : null,
    "Locations" : [ {
      "genericFields" : null,
      "LookupID" : "",
      "Name" : null,
      "PolicyNumber" : "SP26853148",
      "PolicyEffectiveDate" : null,
      "PolicyExpirationDate" : null,
      "PolicyRenewalDate" : null,
      "Address" : {
        "Country" : "United Kingdom",
        "OverseasTerritories" : null,
        "Street1" : "NEW CROSS DEWEL",
        "Street2" : "SD 11 JEW TOWN",
        "City" : "MM KEMSTONE",
        "Region1" : "UK",
        "Region2" : null,
        "Region3" : null,
        "Region4" : null,
        "ZipCode" : "GU1 1DB"
      },
      "OriginalEffectiveDate" : null,
      "EffectiveDate" : null,
      "ExpirationDate" : null,
      "RenewalDate" : "2024-07-17",
      "LastInspectedDate" : null,
      "Coverages" : [ {
        "CoverageTypeLookup" : "PD_TIV",
        "CoverageReference" : "Coverage 1",
        "GenericFields" : [ {
          "Number" : "1123",
          "Key" : "01. PD Building",
          "GenericFieldValueType" : 1,
          "Text" : null
        }, {
          "Number" : "0",
          "Key" : "04. PD Other",
          "GenericFieldValueType" : 1,
          "Text" : null
        }, {
          "Number" : null,
          "Key" : "05. PD Other Description",
          "GenericFieldValueType" : 0,
          "Text" : ""
        }, {
          "Number" : "1123",
          "Key" : "06. TIV PD",
          "GenericFieldValueType" : 1,
          "Text" : null
        }, {
          "Number" : "332198",
          "Key" : "07. TIV BI",
          "GenericFieldValueType" : 1,
          "Text" : null
        }, {
          "Number" : "",
          "Key" : "08. BI Base Period (Months)",
          "GenericFieldValueType" : 1,
          "Text" : null
        }, {
          "Number" : "332198",
          "Key" : "09. TIV (PD + BI )",
          "GenericFieldValueType" : 1,
          "Text" : null
        } ]
      } ],
      "Contact" : null
    } ]
  }
}




public class GenericField{
    public String key;
    public String text;
    public int genericFieldValueType;
}



public class Location{
    @JsonProperty("LookupID") 
    public String lookupID;
    @JsonProperty("Name") 
    public String name;
    @JsonProperty("PolicyNumber") 
    public String policyNumber;
    @JsonProperty("PolicyEffectiveDate") 
    public Date policyEffectiveDate;
    @JsonProperty("PolicyExpirationDate") 
    public Date policyExpirationDate;
    @JsonProperty("PolicyRenewalDate") 
    public Date policyRenewalDate;
    @JsonProperty("Address") 
    public Address address;
    @JsonProperty("OriginalEffectiveDate") 
    public Date originalEffectiveDate;
    @JsonProperty("EffectiveDate") 
    public Date effectiveDate;
    @JsonProperty("ExpirationDate") 
    public Date expirationDate;
    @JsonProperty("RenewalDate") 
    public Date renewalDate;
    @JsonProperty("LastInspectedDate") 
    public Date lastInspectedDate;
    public ArrayList<GenericField> genericFields;
    @JsonProperty("Coverages") 
    public ArrayList<Coverage> coverages;
    @JsonProperty("Contact") 
    public Contact contact;
}



................
{
    "divisionLookupID": "AZ_UK",
    "client": {
        "LookupID": "27105",
        "ContactFirstName": "Client Contact First Name",
        "ContactLastName": "Client Contact Last Name",
        "PolicyNumber": "AS-86587667",
        "Name": "MW Ultan Client Name",
        "Phone": "client Phone",
        "Email": "email@client.com",
        "Address": {
            "Country": "GB",
            "OverseasTerritories": "England",
            "Street1": "C.A. street 1",
            "Street2": "C.A street 2",
            "City": "C.A. City",
            "Region1": "C.A. region1",
            "Region2": "C.A. region2",
            "Region3": "C.A. region3",
            "Region4": "C.A. region4",
            "ZipCode": "C.A. Post Code"
        },
        "Agent": {
            "AgencyCode": "12345678",
            "AgencyName": "MW Ultan Agent 2",
            "AgentCode": "1234",
            "AgentName": "MW Ultan The Only Agent",
            "Email": "ultan@agency.com",
            "FaxNumber": "004416107890",
            "PhoneNumber": "0044316107892",
            "Address": {
                "Country": "GB",
                "Street1": "Agent Street1",
                "Street2": "Agent Street2",
                "City": "Norwich",
                "Region1": "Region1",
                "Region2": "Region2",
                "Region3": "Region3",
                "Region4": "Region4",
                "ZipCode": "PostCode"
            },
            "AgentType": "Broker"
        },
        "Underwriter": {
            "Company": "MW Underwriter company",
            "Email": "ultan@underwriter.com",
            "FirstName": "Underwriter-Ultan",
            "LastName": "Underwriter-McPadden",
            "PhoneNumber": "00441234567",
            "UnderwriterCode": "12345"
        },
        "Locations": [
            {
                "LookupID": "29647",
                "Name": "MW LocationTestUltan API New",
                "PolicyNumber": "API9876567",
                "PolicyEffectiveDate": "2023-03-28T15:08:58.889075+01:00",
                "PolicyExpirationDate": "2023-03-28T15:08:58.889075+01:00",
                "PolicyRenewalDate": "2023-03-28T15:08:58.889075+01:00",
                "Address": {
                    "Country": "GB",
                    "Street1": "L.A. street 1",
                    "Street2": "L.A. street 2",
                    "City": "London",
                    "Region1": "L.A Region1",
                    "Region2": "L.A Region2",
                    "Region3": "L.A Region3",
                    "Region4": "L.A Region4",
                    "ZipCode": "L.A PostCode"
                },
                "OriginalEffectiveDate": "2023-03-28T15:08:58.8820749+01:00",
                "EffectiveDate": "2023-03-28T15:08:58.8820749+01:00",
                "ExpirationDate": "2023-03-28T15:08:58.8820749+01:00",
                "RenewalDate": "2023-03-28T15:08:58.8820749+01:00",
                "LastInspectedDate": "2023-03-28T15:08:58.8820749+01:00",
                "genericFields": [
                    {
                        "key": "0.ISIC+Code",
                        "text": "",
                        "genericFieldValueType": 0
                    }
                ],
                "Coverages": [
                    {
                        "CoverageTypeLookup": "PD_TIV",
                        "GenericFields": [
                            {
                                "Number": "50000",
                                "Key": "01. PD Building",
                                "GenericFieldValueType": 1
                            },
                            {
                                "Number": "40000",
                                "Key": "02. PD Content",
                                "GenericFieldValueType": 1
                            },
                            {
                                "Number": "30000",
                                "Key": "03. Stock & Supply",
                                "GenericFieldValueType": 1
                            },
                            {
                                "Number": "20000",
                                "Key": "04. PD Other",
                                "GenericFieldValueType": 1
                            },
                            {
                                "Text": "Machinary",
                                "Key": "05. PD Other Description",
                                "GenericFieldValueType": 0
                            },
                            {
                                "Number": "140000",
                                "Key": "06. TIV PD",
                                "GenericFieldValueType": 1
                            },
                            {
                                "Number": "10000",
                                "Key": "07. TIV BI",
                                "GenericFieldValueType": 1
                            },
                            {
                                "Number": "12",
                                "Key": "08. BI Base Period (Months)",
                                "GenericFieldValueType": 1
                            },
                            {
                                "Number": "150000",
                                "Key": "09. TIV (PD + BI )",
                                "GenericFieldValueType": 1
                            }
                        ]
                    },
                    {
                        "CoverageTypeLookup": "CC_LIAB",
                        "GenericFields": [
                            {
                                "Number": "5000",
                                "Key": "Limit of Liability",
                                "GenericFieldValueType": 1
                            },
                            {
                                "Number": "10",
                                "Key": "Number of Employees",
                                "GenericFieldValueType": 1
                            },
                            {
                                "Number": "5000",
                                "Key": "Total Turnover",
                                "GenericFieldValueType": 1
                            }
                        ]
                    }
                ],
                "Contact": {
                    "CellPhone": "L. Contact Cellphone",
                    "CompanyName": "L. Contact CompanyName",
                    "Email": "L. Contact Email",
                    "FirstName": "L. Contact First Name",
                    "HomePhone": "L. Contact HomePhone",
                    "LastName": "L. Contact LastName",
                    "Occupation": "L. Contact Occupation",
                    "UseCompanyName": true,
                    "WorkPhone": "L. Contact WorkPhone",
                    "Location": "L. Contact Location"
                }
            }
        ]
    }
}






...............................................................................................................................
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;
import com.google.gson.JsonObject;

@RestController
public class DataController {

	private final DataService dataService;
	private final Gson gson;
	private final ObjectMapper objectMapper;

	@Autowired
	public DataController(DataService dataService, Gson gson, ObjectMapper objectMapper) {
		this.dataService = dataService;
		this.gson = gson;
		this.objectMapper = objectMapper;

	}
	@PostMapping("/client")
    public ResponseEntity<String> processData1(@RequestBody String jsonData) {
        try {
            if (jsonData == null) {
                throw new IllegalArgumentException("JSON Data Can't be null");
            }
            List<JsonObject> processedData = dataService.processJsonData(jsonData);
            String processedJson = gson.toJson(processedData);

            // Deserialize JSON into ImportClientRequest objects
            ImportClientRequest[] importClientRequests = objectMapper.readValue(processedJson,
                    ImportClientRequest[].class);

            // Now you have the data in Java objects, and you can work with it as needed
            for (ImportClientRequest importClientRequest : importClientRequests) {
                // Access data from each ImportClientRequest object
                String divisionLookupID = importClientRequest.getDivisionLookupID();
                Client client = importClientRequest.getClient();
                // ... and so on

                System.out.println("DivisionLookupID: " + divisionLookupID);
                if (client != null) {
                    System.out.println("Client LookupID: " + client.getLookupID());
                    System.out.println("Client PolicyNumber: " + client.getPolicyNumber());
                    System.out.println("Client PolicyName: " + client.getName());

                    Address address = client.getAddress();
                    if (address != null) {
                        System.out.println("Address country: " + address.getCountry());
                        // Access other address fields as needed
                    }

                    Agent agent = client.getAgent();
                    if (agent != null) {
                        System.out.println("AgencyCode: " + agent.getAgencyCode());
                        System.out.println("AgencyName: " + agent.getAgencyName());
                        System.out.println("AgentCode: " + agent.getAgentCode());
                        // Access other agent fields as needed
                    }

                    List<Location> locationsList = client.getLocations();
                    for (Location location : locationsList) {
                        System.out.println("RenewalDate: " + location.getRenewalDate());
                        // Access other location fields as needed
                    }
                }
            }

            return ResponseEntity.ok("JSON data processed successfully.");
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(e.getMessage());
        }
    }

	@PostMapping("/data")
	public ResponseEntity<String> processData(@RequestBody String jsonData) {
		try {

			if (jsonData == null) {
				throw new IllegalArgumentException("JSON Data Can't be null");
			}
			List<JsonObject> processedData = dataService.processJsonData(jsonData);
			String processedJson = gson.toJson(processedData);
			return ResponseEntity.ok(processedJson);
		} catch (IllegalArgumentException e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}
}




[ {
  "inspections.0.PolicyNumber" : "I94788",
  "inspections.0.DivisionLookupID" : "75",
  "inspections.0.InspectionTypeLookupID" : "75",
  "inspections.0.Location.Country" : "BS",
  "inspections.0.Mailing.Country" : "RR",
  "inspections.0.Mailing.City" : "C",
  "inspections.0.Mailing.ZipCode" : "SP22677819",
  "inspections.0.Mailing.Street1" : "C012682006",
  "inspections.0.PolicyHolder.CompanyName" : "tBh mMgw uouC qwpASux",
  "inspections.0.Agent.AgentCode" : "100 pBlyGJMnGFiyw",
  "inspections.0.Agent.AgentType" : "qCqvND",
  "inspections.0.Agent.AgencyName" : "qwdewq",
  "inspections.0.Agent.AgencyCode" : "SW1X 7LJ",
  "inspections.0.OrderNotes" : "PROPERTY OWNERS",
  "inspections.0.GenericFields.0.Key" : "75",
  "inspections.0.GenericFields.0.Text" : "94431",
  "inspections.0.GenericFields.0.GenericFieldValueType" : "13832",
  "inspections.0.CurrencyISO" : "Lockton Companies LLP",
  "inspections.0.ClientInfo.LookupId" : "Y",
  "inspections.0.ClientInfo.LocationInfo.LookupId" : "20231231",
  "inspections.0.GenericFields.0.GenericFields" : "872170",
  "divisionLookupID" : "1391199069",
  "client.LookupID" : "B",
  "client.PolicyNumber" : "20220128",
  "client.Name" : "Property Damage All Risks Section",
  "client.Address.Country" : "13",
  "client.Agent.AgencyCode" : "12.64",
  "client.Agent.AgencyName" : "20210101",
  "client.Agent.AgentCode" : "Property Damage All Risks Section",
  "client.Agent.Address.Country" : "6656",
  "client.Agent.Address.Street1" : "1149.6",
  "client.Agent.Address.Street2" : "20190902",
  "client.Agent.Address.City" : "Property Damage All Risks Section",
  "client.Agent.Address.Region1" : "3379",
  "client.Agent.Address.Region2" : "3378.13",
  "client.Agent.Address.Region3" : "1",
  "client.Agent.Address.Region4" : "Global Terrorism - Property Damage",
  "client.Agent.Address.ZipCode" : "0",
  "client.Agent.AgentType" : "2",
  "client.Locations.0.LookupID" : "Item Details",
  "client.Locations.0.PolicyNumber" : "0",
  "client.Locations.0.Address.Country" : "3",
  "client.Locations.0.Address.Street1" : "Contents",
  "client.Locations.0.Address.Street2" : "132531529",
  "client.Locations.0.Address.City" : "3",
  "client.Locations.0.Address.Region1" : "Buildings",
  "client.Locations.0.Address.Region2" : "575700000",
  "client.Locations.0.Address.ZipCode" : "1",
  "client.Locations.0.RenewalDate" : "Global Terrorism - Business Interruption",
  "client.Locations.0.Coverages.0.CoverageTypeLookup" : "0",
  "client.Locations.0.Coverages.0.CoverageReference" : "2",
  "client.Locations.0.Coverages.0.GenericFields.1.Number" : "Item Details",
  "client.Locations.0.Coverages.0.GenericFields.1.Key" : "0",
  "client.Locations.0.Coverages.0.GenericFields.1.GenericFieldValueType" : "3",
  "client.Locations.0.Coverages.1.CoverageTypeLookup" : "Bus. Interrupt."
  }, {
  "inspections.0.PolicyNumber" : "I94788",
  "inspections.0.DivisionLookupID" : "75",
  "inspections.0.InspectionTypeLookupID" : "75",
  "inspections.0.Location.Country" : "CS",
  "inspections.0.Mailing.Country" : "PT",
  "inspections.0.Mailing.City" : "C",
  "inspections.0.Mailing.ZipCode" : "SP25496107",
  "inspections.0.Mailing.Street1" : "C006729450",
  "inspections.0.PolicyHolder.CompanyName" : "uvrwMyR mCwwK xsuNHsyE qHg & uvrwMyR mCwwKS qHg y/o uvrwMyR",
  "inspections.0.Agent.AgentCode" : "psqKHDAFDK lsJilwH GJBeHw",
  "inspections.0.Agent.AgentType" : "qCqvND",
  "inspections.0.Agent.AgencyName" : "dasas",
  "inspections.0.Agent.AgencyCode" : "W2 4BH",
  "inspections.0.OrderNotes" : "PROPERTY OWNERS & HOTELIERS",
  "inspections.0.GenericFields.0.Key" : "75",
  "inspections.0.GenericFields.0.Text" : "94431",
  "inspections.0.GenericFields.0.GenericFieldValueType" : "13832",
  "inspections.0.CurrencyISO" : "Lockton Companies LLP",
  "inspections.0.ClientInfo.LookupId" : "Y",
  "inspections.0.ClientInfo.LocationInfo.LookupId" : "20220101",
  "inspections.0.GenericFields.0.GenericFields" : "3720",
  "divisionLookupID" : "1274250",
  "client.LookupID" : "B",
  "client.PolicyNumber" : "20200713",
  "client.Name" : "Property Damage All Risks Section",
  "client.Address.Country" : "0",
  "client.Agent.AgencyCode" : "0",
  "client.Agent.AgencyName" : "20200601",
  "client.Agent.AgentCode" : "Property Damage All Risks Section",
  "client.Agent.Address.Country" : "3335",
  "client.Agent.Address.Street1" : "390",
  "client.Agent.Address.Street2" : "12334",
  "client.Agent.Address.City" : "ABC",
  "client.Agent.Address.Region1" : "0",
  "client.Agent.Address.Region2" : "0",
  "client.Agent.Address.Region3" : "1",
  "client.Agent.Address.Region4" : "Global Property Damage All Risks Section",
  "client.Agent.Address.ZipCode" : "0",
  "client.Agent.AgentType" : "2",
  "client.Locations.0.LookupID" : "Item Details",
  "client.Locations.0.PolicyNumber" : "0",
  "client.Locations.0.Address.Country" : "3",
  "client.Locations.0.Address.Street1" : "Contents of Flats and Private dwellings as advised",
  "client.Locations.0.Address.Street2" : "312000",
  "client.Locations.0.Address.City" : "1",
  "client.Locations.0.Address.Region1" : "Global Loss of Rent All Risks Section",
  "client.Locations.0.Address.Region2" : "0",
  "client.Locations.0.Address.ZipCode" : "2",
  "client.Locations.0.RenewalDate" : "Item Details",
  "client.Locations.0.Coverages.0.CoverageTypeLookup" : "0",
  "client.Locations.0.Coverages.0.CoverageReference" : "3",
  "client.Locations.0.Coverages.0.GenericFields.1.Number" : "Loss of Rent",
  "client.Locations.0.Coverages.0.GenericFields.1.Key" : "375000",
  "client.Locations.0.Coverages.0.GenericFields.1.GenericFieldValueType" : "2",
  "client.Locations.0.Coverages.1.CoverageTypeLookup" : "Item Details"
  }, {
  "inspections.0.PolicyNumber" : "I94788",
  "inspections.0.DivisionLookupID" : "75",
  "inspections.0.InspectionTypeLookupID" : "75",
  "inspections.0.Location.Country" : "RA",
  "inspections.0.Mailing.Country" : "PL",
  "inspections.0.Mailing.City" : "C",
  "inspections.0.Mailing.ZipCode" : "SP29238776",
  "inspections.0.Mailing.Street1" : "C018781222",
  "inspections.0.PolicyHolder.CompanyName" : "MERCANTILE GROUP OF COMPANIES",
  "inspections.0.Agent.AgentCode" : "7  8  7A & 8A QUEENS PARADE",
  "inspections.0.Agent.AgentType" : "SEABURN",
  "inspections.0.Agent.AgencyName" : "SUNDERLAND",
  "inspections.0.Agent.AgencyCode" : "SR6 8DA",
  "inspections.0.OrderNotes" : "PROPERTY OWNERS",
  "inspections.0.GenericFields.0.Key" : "75",
  "inspections.0.GenericFields.0.Text" : "91115",
  "inspections.0.GenericFields.0.GenericFieldValueType" : "20756",
  "inspections.0.CurrencyISO" : "Howden Insurance Brokers Ltd",
  "inspections.0.ClientInfo.LookupId" : "Y",
  "inspections.0.ClientInfo.LocationInfo.LookupId" : "20240120",
  "inspections.0.GenericFields.0.GenericFields" : "123123.33",
  "divisionLookupID" : "678099",
  "client.LookupID" : "B",
  "client.PolicyNumber" : "20220302",
  "client.Name" : "Loss of Rent All Risks Section",
  "client.Address.Country" : "4500",
  "client.Agent.AgencyCode" : "13500",
  "client.Agent.AgencyName" : "20220302",
  "client.Agent.AgentCode" : "Property Damage All Risks Section",
  "client.Agent.Address.Country" : "103653",
  "client.Agent.Address.Street1" : "39247.2",
  "client.Agent.Address.Street2" : "20211127",
  "client.Agent.Address.City" : "Property Damage All Risks Section",
  "client.Agent.Address.Region1" : "80640",
  "client.Agent.Address.Region2" : "28360",
  "client.Agent.Address.Region3" : "1",
  "client.Agent.Address.Region4" : "Global Property Owners Liability Section",
  "client.Agent.Address.ZipCode" : "0",
  "client.Agent.AgentType" : "2",
  "client.Locations.0.LookupID" : "Item Details",
  "client.Locations.0.PolicyNumber" : "0",
  "client.Locations.0.Address.Country" : "3",
  "client.Locations.0.Address.Street1" : "Third Party Prop",
  "client.Locations.0.Address.Street2" : "500",
  "client.Locations.0.Address.City" : "2",
  "client.Locations.0.Address.Region1" : "Wages/Turnover Details",
  "client.Locations.0.Address.Region2" : "0",
  "client.Locations.0.Address.ZipCode" : "1",
  "client.Locations.0.RenewalDate" : "Location Property Damage All Risks Section",
  "client.Locations.0.Coverages.0.CoverageTypeLookup" : "0",
  "client.Locations.0.Coverages.0.CoverageReference" : "2",
  "client.Locations.0.Coverages.0.GenericFields.1.Number" : "Item Details",
  "client.Locations.0.Coverages.0.GenericFields.1.Key" : "0",
  "client.Locations.0.Coverages.0.GenericFields.1.GenericFieldValueType" : "3",
  "client.Locations.0.Coverages.1.CoverageTypeLookup" : "Buildings occupied as Takeaways and     Tyneside f"}, {
  "inspections.0.PolicyNumber" : "I94788",
  "inspections.0.DivisionLookupID" : "75",
  "inspections.0.InspectionTypeLookupID" : "75",
  "inspections.0.Location.Country" : "SS",
  "inspections.0.Mailing.Country" : "RR",
  "inspections.0.Mailing.City" : "C",
  "inspections.0.Mailing.ZipCode" : "SP29238776",
  "inspections.0.Mailing.Street1" : "C018781222",
  "inspections.0.PolicyHolder.CompanyName" : "MERCANTILE GROUP OF COMPANIES",
  "inspections.0.Agent.AgentCode" : "4 NEVILLE ROAD",
  "inspections.0.Agent.AgentType" : "PALLION",
  "inspections.0.Agent.AgencyName" : "SUNDERLAND",
  "inspections.0.Agent.AgencyCode" : "SR4 6QT",
  "inspections.0.OrderNotes" : "PROPERTY OWNERS",
  "inspections.0.GenericFields.0.Key" : "75",
  "inspections.0.GenericFields.0.Text" : "91115",
  "inspections.0.GenericFields.0.GenericFieldValueType" : "20756",
  "inspections.0.CurrencyISO" : "Howden Insurance Brokers Ltd",
  "inspections.0.ClientInfo.LookupId" : "Y",
  "inspections.0.ClientInfo.LocationInfo.LookupId" : "20240120",
  "divisionLookupID" : "145512",
  "client.LookupID" : "B",
  "client.PolicyNumber" : "20220302",
  "client.Name" : "Loss of Rent All Risks Section",
  "client.Address.Country" : "4500",
  "client.Agent.AgencyCode" : "13500",
  "client.Agent.AgencyName" : "20220302",
  "client.Agent.AgentCode" : "Property Damage All Risks Section",
  "client.Agent.Address.Country" : "103653",
  "client.Agent.Address.Street1" : "39247.2",
  "client.Agent.Address.Street2" : "20211127",
  "client.Agent.Address.City" : "Property Damage All Risks Section",
  "client.Agent.Address.Region1" : "80640",
  "client.Agent.Address.Region2" : "28360",
  "client.Agent.Address.Region3" : "1",
  "client.Agent.Address.Region4" : "Global Property Owners Liability Section",
  "client.Agent.Address.ZipCode" : "0",
  "client.Agent.AgentType" : "2",
  "client.Locations.0.LookupID" : "Item Details",
  "client.Locations.0.PolicyNumber" : "0",
  "client.Locations.0.Address.Country" : "3",
  "client.Locations.0.Address.Street1" : "Third Party Prop",
  "client.Locations.0.Address.Street2" : "500",
  "client.Locations.0.Address.City" : "2",
  "client.Locations.0.Address.Region1" : "Wages/Turnover Details",
  "client.Locations.0.Address.Region2" : "0",
  "client.Locations.0.Address.ZipCode" : "1",
  "client.Locations.0.RenewalDate" : "Location Property Damage All Risks Section",
  "client.Locations.0.Coverages.0.CoverageTypeLookup" : "0",
  "client.Locations.0.Coverages.0.CoverageReference" : "2",
  "client.Locations.0.Coverages.0.GenericFields.1.Number" : "Item Details",
  "client.Locations.0.Coverages.0.GenericFields.1.Key" : "0",
  "client.Locations.0.Coverages.0.GenericFields.1.GenericFieldValueType" : "3",
  "client.Locations.0.Coverages.1.CoverageTypeLookup" : "Buildings occupied as Barber"
} ]




/////////////////////////////////////////
package uk.co.allianz.rap.lc.model.request.importclient;

import com.fasterxml.jackson.annotation.JsonProperty;
@SuppressWarnings("unused")
public class Underwriter {
    @JsonProperty("Company")
    private String company;
    @JsonProperty("Email")
    private String email;
    @JsonProperty("FirstName")
    private String firstName;
    @JsonProperty("LastName")
    private String lastName;
    @JsonProperty("PhoneNumber")
    private String phoneNumber;
    @JsonProperty("UnderwriterCode")
    private String underwriterCode;
}

..
package uk.co.allianz.rap.lc.model.request.importclient;

import com.fasterxml.jackson.annotation.JsonProperty;
..
import java.util.ArrayList;
import java.util.Date;

@SuppressWarnings("unused")
public class Location {
    @JsonProperty("LookupID")
    private String lookupID;
    @JsonProperty("Name")
    private String name;
    @JsonProperty("PolicyNumber")
    private String policyNumber;
    @JsonProperty("PolicyEffectiveDate")
    private Date policyEffectiveDate;
    @JsonProperty("PolicyExpirationDate")
    private Date policyExpirationDate;
    @JsonProperty("PolicyRenewalDate")
    private Date policyRenewalDate;
    @JsonProperty("Address")
    private Address address;
    @JsonProperty("OriginalEffectiveDate")
    private Date originalEffectiveDate;
    @JsonProperty("EffectiveDate")
    private Date effectiveDate;
    @JsonProperty("ExpirationDate")
    private Date expirationDate;
    @JsonProperty("RenewalDate")
    private Date renewalDate;
    @JsonProperty("LastInspectedDate")
    private Date lastInspectedDate;
    @JsonProperty("genericFields")
    private ArrayList<GenericField> genericFields;
    @JsonProperty("Coverages")
    private ArrayList<Coverage> coverages;
    @JsonProperty("Contact")
    private Contact contact;
}

..
package uk.co.allianz.rap.lc.model.request.importclient;

import lombok.Data;

@SuppressWarnings("unused")
@Data
public class ImportClientRequest {
    private String divisionLookupID;
    private Client client;
}

..
package uk.co.allianz.rap.lc.model.request.importclient;

import com.fasterxml.jackson.annotation.JsonProperty;

@SuppressWarnings("unused")
public class GenericField2 {
    @JsonProperty("Number")
    private String number;
    @JsonProperty("Key")
    private String key;
    @JsonProperty("GenericFieldValueType")
    private int genericFieldValueType;
    @JsonProperty("Text")
    private String text;
}

..
package uk.co.allianz.rap.lc.model.request.importclient;

import lombok.Data;


@Data
public class GenericField {
    private String key;
    private String text;
    private int genericFieldValueType;
}

..
package uk.co.allianz.rap.lc.model.request.importclient;

import com.fasterxml.jackson.annotation.JsonProperty;

import java.util.ArrayList;
@SuppressWarnings("unused")
public class Coverage {
    @JsonProperty("CoverageTypeLookup")
    private String coverageTypeLookup;
    @JsonProperty("GenericFields")
    private ArrayList<GenericField2> genericFields;
}


..
package uk.co.allianz.rap.lc.model.request.importclient;

import com.fasterxml.jackson.annotation.JsonProperty;
@SuppressWarnings("unused")
public class Contact {
    @JsonProperty("CellPhone")
    private String cellPhone;
    @JsonProperty("CompanyName")
    private String companyName;
    @JsonProperty("Email")
    private String email;
    @JsonProperty("FirstName")
    private String firstName;
    @JsonProperty("HomePhone")
    private String homePhone;
    @JsonProperty("LastName")
    private String lastName;
    @JsonProperty("Occupation")
    private String occupation;
    @JsonProperty("UseCompanyName")
    private boolean useCompanyName;
    @JsonProperty("WorkPhone")
    private String workPhone;
    @JsonProperty("Location")
    private String location;
}

..
package uk.co.allianz.rap.lc.model.request.importclient;

import com.fasterxml.jackson.annotation.JsonProperty;

import java.util.ArrayList;
@SuppressWarnings("unused")
public class Client {
    @JsonProperty("LookupID")
    private String lookupID;
    @JsonProperty("ContactFirstName")
    private String contactFirstName;
    @JsonProperty("ContactLastName")
    private String contactLastName;
    @JsonProperty("PolicyNumber")
    private String policyNumber;
    @JsonProperty("Name")
    private String name;
    @JsonProperty("Phone")
    private String phone;
    @JsonProperty("Email")
    private String email;
    @JsonProperty("Address")
    private Address address;
    @JsonProperty("Agent")
    private Agent agent;
    @JsonProperty("Underwriter")
    private Underwriter underwriter;
    @JsonProperty("Locations")
    private ArrayList<Location> locations;
}

...
package uk.co.allianz.rap.lc.model.request.importclient;

import com.fasterxml.jackson.annotation.JsonProperty;

@SuppressWarnings("unused")
public class Agent {
    @JsonProperty("AgencyCode")
    private String agencyCode;
    @JsonProperty("AgencyName")
    private String agencyName;
    @JsonProperty("AgentCode")
    private String agentCode;
    @JsonProperty("AgentName")
    private String agentName;
    @JsonProperty("Email")
    private String email;
    @JsonProperty("FaxNumber")
    private String faxNumber;
    @JsonProperty("PhoneNumber")
    private String phoneNumber;
    @JsonProperty("Address")
    private Address address;
    @JsonProperty("AgentType")
    private String agentType;
}

...
package uk.co.allianz.rap.lc.model.request.importclient;

import com.fasterxml.jackson.annotation.JsonProperty;

@SuppressWarnings("unused")
public class Address {
    @JsonProperty("Country")
    private String country;
    @JsonProperty("Street1")
    private String street1;
    @JsonProperty("Street2")
    private String street2;
    @JsonProperty("City")
    private String city;
    @JsonProperty("Region1")
    private String region1;
    @JsonProperty("Region2")
    private String region2;
    @JsonProperty("Region3")
    private String region3;
    @JsonProperty("Region4")
    private String region4;
    @JsonProperty("ZipCode")
    private String zipCode;
}





[ {
  "inspections.0.PolicyNumber" : "I94788",
  "inspections.0.DivisionLookupID" : "75",
  "inspections.0.InspectionTypeLookupID" : "75",
  "inspections.0.Location.Country" : "BS",
  "inspections.0.Mailing.Country" : "RR",
  "inspections.0.Mailing.City" : "C",
  "inspections.0.Mailing.ZipCode" : "SP22677819",
  "inspections.0.Mailing.Street1" : "C012682006",
  "inspections.0.PolicyHolder.CompanyName" : "tBh mMgw uouC qwpASux",
  "inspections.0.Agent.AgentCode" : "100 pBlyGJMnGFiyw",
  "inspections.0.Agent.AgentType" : "qCqvND",
  "inspections.0.Agent.AgencyName" : "qwdewq",
  "inspections.0.Agent.AgencyCode" : "SW1X 7LJ",
  "inspections.0.OrderNotes" : "PROPERTY OWNERS",
  "inspections.0.GenericFields.0.Key" : "75",
  "inspections.0.GenericFields.0.Text" : "94431",
  "inspections.0.GenericFields.0.GenericFieldValueType" : "13832",
  "inspections.0.CurrencyISO" : "Lockton Companies LLP",
  "inspections.0.ClientInfo.LookupId" : "Y",
  "inspections.0.ClientInfo.LocationInfo.LookupId" : "20231231",
  "inspections.0.GenericFields.0.GenericFields" : "872170",
  "divisionLookupID" : "1391199069",
  "client.LookupID" : "B",
  "client.PolicyNumber" : "20220128",
  "client.Name" : "Property Damage All Risks Section",
  "client.Address.Country" : "13",
  "client.Agent.AgencyCode" : "12.64",
  "client.Agent.AgencyName" : "20210101",
  "client.Agent.AgentCode" : "Property Damage All Risks Section",
  "client.Agent.Address.Country" : "6656",
  "client.Agent.Address.Street1" : "1149.6",
  "client.Agent.Address.Street2" : "20190902",
  "client.Agent.Address.City" : "Property Damage All Risks Section",
  "client.Agent.Address.Region1" : "3379",
  "client.Agent.Address.Region2" : "3378.13",
  "client.Agent.Address.Region3" : "1",
  "client.Agent.Address.Region4" : "Global Terrorism - Property Damage",
  "client.Agent.Address.ZipCode" : "0",
  "client.Agent.AgentType" : "2",
  "client.Locations.0.LookupID" : "Item Details",
  "client.Locations.0.PolicyNumber" : "0",
  "client.Locations.0.Address.Country" : "3",
  "client.Locations.0.Address.Street1" : "Contents",
  "client.Locations.0.Address.Street2" : "132531529",
  "client.Locations.0.Address.City" : "3",
  "client.Locations.0.Address.Region1" : "Buildings",
  "client.Locations.0.Address.Region2" : "575700000",
  "client.Locations.0.Address.ZipCode" : "1",
  "client.Locations.0.RenewalDate" : "Global Terrorism - Business Interruption",
  "client.Locations.0.Coverages.0.CoverageTypeLookup" : "0",
  "client.Locations.0.Coverages.0.CoverageReference" : "2",
  "client.Locations.0.Coverages.0.GenericFields.1.Number" : "Item Details",
  "client.Locations.0.Coverages.0.GenericFields.1.Key" : "0",
  "client.Locations.0.Coverages.0.GenericFields.1.GenericFieldValueType" : "3",
  "client.Locations.0.Coverages.1.CoverageTypeLookup" : "Bus. Interrupt.",
  "client.Locations.0.Coverages.0..GenericFields" : "7500000"
}, {
  "inspections.0.PolicyNumber" : "I94788",
  "inspections.0.DivisionLookupID" : "75",
  "inspections.0.InspectionTypeLookupID" : "75",
  "inspections.0.Location.Country" : "CS",
  "inspections.0.Mailing.Country" : "PT",
  "inspections.0.Mailing.City" : "C",
  "inspections.0.Mailing.ZipCode" : "SP25496107",
  "inspections.0.Mailing.Street1" : "C006729450",
  "inspections.0.PolicyHolder.CompanyName" : "uvrwMyR mCwwK xsuNHsyE qHg & uvrwMyR mCwwKS qHg y/o uvrwMyR",
  "inspections.0.Agent.AgentCode" : "psqKHDAFDK lsJilwH GJBeHw",
  "inspections.0.Agent.AgentType" : "qCqvND",
  "inspections.0.Agent.AgencyName" : "dasas",
  "inspections.0.Agent.AgencyCode" : "W2 4BH",
  "inspections.0.OrderNotes" : "PROPERTY OWNERS & HOTELIERS",
  "inspections.0.GenericFields.0.Key" : "75",
  "inspections.0.GenericFields.0.Text" : "94431",
  "inspections.0.GenericFields.0.GenericFieldValueType" : "13832",
  "inspections.0.CurrencyISO" : "Lockton Companies LLP",
  "inspections.0.ClientInfo.LookupId" : "Y",
  "inspections.0.ClientInfo.LocationInfo.LookupId" : "20220101",
  "inspections.0.GenericFields.0.GenericFields" : "3720",
  "divisionLookupID" : "1274250",
  "client.LookupID" : "B",
  "client.PolicyNumber" : "20200713",
  "client.Name" : "Property Damage All Risks Section",
  "client.Address.Country" : "0",
  "client.Agent.AgencyCode" : "0",
  "client.Agent.AgencyName" : "20200601",
  "client.Agent.AgentCode" : "Property Damage All Risks Section",
  "client.Agent.Address.Country" : "3335",
  "client.Agent.Address.Street1" : "390",
  "client.Agent.Address.Street2" : "12334",
  "client.Agent.Address.City" : "ABC",
  "client.Agent.Address.Region1" : "0",
  "client.Agent.Address.Region2" : "0",
  "client.Agent.Address.Region3" : "1",
  "client.Agent.Address.Region4" : "Global Property Damage All Risks Section",
  "client.Agent.Address.ZipCode" : "0",
  "client.Agent.AgentType" : "2",
  "client.Locations.0.LookupID" : "Item Details",
  "client.Locations.0.PolicyNumber" : "0",
  "client.Locations.0.Address.Country" : "3",
  "client.Locations.0.Address.Street1" : "Contents of Flats and Private dwellings as advised",
  "client.Locations.0.Address.Street2" : "312000",
  "client.Locations.0.Address.City" : "1",
  "client.Locations.0.Address.Region1" : "Global Loss of Rent All Risks Section",
  "client.Locations.0.Address.Region2" : "0",
  "client.Locations.0.Address.ZipCode" : "2",
  "client.Locations.0.RenewalDate" : "Item Details",
  "client.Locations.0.Coverages.0.CoverageTypeLookup" : "0",
  "client.Locations.0.Coverages.0.CoverageReference" : "3",
  "client.Locations.0.Coverages.0.GenericFields.1.Number" : "Loss of Rent",
  "client.Locations.0.Coverages.0.GenericFields.1.Key" : "375000",
  "client.Locations.0.Coverages.0.GenericFields.1.GenericFieldValueType" : "2",
  "client.Locations.0.Coverages.1.CoverageTypeLookup" : "Item Details",
  "client.Locations.0.Coverages.0..GenericFields" : "0"
}, {
  "inspections.0.PolicyNumber" : "I94788",
  "inspections.0.DivisionLookupID" : "75",
  "inspections.0.InspectionTypeLookupID" : "75",
  "inspections.0.Location.Country" : "RA",
  "inspections.0.Mailing.Country" : "PL",
  "inspections.0.Mailing.City" : "C",
  "inspections.0.Mailing.ZipCode" : "SP29238776",
  "inspections.0.Mailing.Street1" : "C018781222",
  "inspections.0.PolicyHolder.CompanyName" : "MERCANTILE GROUP OF COMPANIES",
  "inspections.0.Agent.AgentCode" : "7  8  7A & 8A QUEENS PARADE",
  "inspections.0.Agent.AgentType" : "SEABURN",
  "inspections.0.Agent.AgencyName" : "SUNDERLAND",
  "inspections.0.Agent.AgencyCode" : "SR6 8DA",
  "inspections.0.OrderNotes" : "PROPERTY OWNERS",
  "inspections.0.GenericFields.0.Key" : "75",
  "inspections.0.GenericFields.0.Text" : "91115",
  "inspections.0.GenericFields.0.GenericFieldValueType" : "20756",
  "inspections.0.CurrencyISO" : "Howden Insurance Brokers Ltd",
  "inspections.0.ClientInfo.LookupId" : "Y",
  "inspections.0.ClientInfo.LocationInfo.LookupId" : "20240120",
  "inspections.0.GenericFields.0.GenericFields" : "123123.33",
  "divisionLookupID" : "678099",
  "client.LookupID" : "B",
  "client.PolicyNumber" : "20220302",
  "client.Name" : "Loss of Rent All Risks Section",
  "client.Address.Country" : "4500",
  "client.Agent.AgencyCode" : "13500",
  "client.Agent.AgencyName" : "20220302",
  "client.Agent.AgentCode" : "Property Damage All Risks Section",
  "client.Agent.Address.Country" : "103653",
  "client.Agent.Address.Street1" : "39247.2",
  "client.Agent.Address.Street2" : "20211127",
  "client.Agent.Address.City" : "Property Damage All Risks Section",
  "client.Agent.Address.Region1" : "80640",
  "client.Agent.Address.Region2" : "28360",
  "client.Agent.Address.Region3" : "1",
  "client.Agent.Address.Region4" : "Global Property Owners Liability Section",
  "client.Agent.Address.ZipCode" : "0",
  "client.Agent.AgentType" : "2",
  "client.Locations.0.LookupID" : "Item Details",
  "client.Locations.0.PolicyNumber" : "0",
  "client.Locations.0.Address.Country" : "3",
  "client.Locations.0.Address.Street1" : "Third Party Prop",
  "client.Locations.0.Address.Street2" : "500",
  "client.Locations.0.Address.City" : "2",
  "client.Locations.0.Address.Region1" : "Wages/Turnover Details",
  "client.Locations.0.Address.Region2" : "0",
  "client.Locations.0.Address.ZipCode" : "1",
  "client.Locations.0.RenewalDate" : "Location Property Damage All Risks Section",
  "client.Locations.0.Coverages.0.CoverageTypeLookup" : "0",
  "client.Locations.0.Coverages.0.CoverageReference" : "2",
  "client.Locations.0.Coverages.0.GenericFields.1.Number" : "Item Details",
  "client.Locations.0.Coverages.0.GenericFields.1.Key" : "0",
  "client.Locations.0.Coverages.0.GenericFields.1.GenericFieldValueType" : "3",
  "client.Locations.0.Coverages.1.CoverageTypeLookup" : "Buildings occupied as Takeaways and     Tyneside f",
  "client.Locations.0.Coverages.0..GenericFields" : "677599"
}, {
  "inspections.0.PolicyNumber" : "I94788",
  "inspections.0.DivisionLookupID" : "75",
  "inspections.0.InspectionTypeLookupID" : "75",
  "inspections.0.Location.Country" : "SS",
  "inspections.0.Mailing.Country" : "RR",
  "inspections.0.Mailing.City" : "C",
  "inspections.0.Mailing.ZipCode" : "SP29238776",
  "inspections.0.Mailing.Street1" : "C018781222",
  "inspections.0.PolicyHolder.CompanyName" : "MERCANTILE GROUP OF COMPANIES",
  "inspections.0.Agent.AgentCode" : "4 NEVILLE ROAD",
  "inspections.0.Agent.AgentType" : "PALLION",
  "inspections.0.Agent.AgencyName" : "SUNDERLAND",
  "inspections.0.Agent.AgencyCode" : "SR4 6QT",
  "inspections.0.OrderNotes" : "PROPERTY OWNERS",
  "inspections.0.GenericFields.0.Key" : "75",
  "inspections.0.GenericFields.0.Text" : "91115",
  "inspections.0.GenericFields.0.GenericFieldValueType" : "20756",
  "inspections.0.CurrencyISO" : "Howden Insurance Brokers Ltd",
  "inspections.0.ClientInfo.LookupId" : "Y",
  "inspections.0.ClientInfo.LocationInfo.LookupId" : "20240120",
  "inspections.0.GenericFields.0.GenericFields" : "123123.33",
  "divisionLookupID" : "145512",
  "client.LookupID" : "B",
  "client.PolicyNumber" : "20220302",
  "client.Name" : "Loss of Rent All Risks Section",
  "client.Address.Country" : "4500",
  "client.Agent.AgencyCode" : "13500",
  "client.Agent.AgencyName" : "20220302",
  "client.Agent.AgentCode" : "Property Damage All Risks Section",
  "client.Agent.Address.Country" : "103653",
  "client.Agent.Address.Street1" : "39247.2",
  "client.Agent.Address.Street2" : "20211127",
  "client.Agent.Address.City" : "Property Damage All Risks Section",
  "client.Agent.Address.Region1" : "80640",
  "client.Agent.Address.Region2" : "28360",
  "client.Agent.Address.Region3" : "1",
  "client.Agent.Address.Region4" : "Global Property Owners Liability Section",
  "client.Agent.Address.ZipCode" : "0",
  "client.Agent.AgentType" : "2",
  "client.Locations.0.LookupID" : "Item Details",
  "client.Locations.0.PolicyNumber" : "0",
  "client.Locations.0.Address.Country" : "3",
  "client.Locations.0.Address.Street1" : "Third Party Prop",
  "client.Locations.0.Address.Street2" : "500",
  "client.Locations.0.Address.City" : "2",
  "client.Locations.0.Address.Region1" : "Wages/Turnover Details",
  "client.Locations.0.Address.Region2" : "0",
  "client.Locations.0.Address.ZipCode" : "1",
  "client.Locations.0.RenewalDate" : "Location Property Damage All Risks Section",
  "client.Locations.0.Coverages.0.CoverageTypeLookup" : "0",
  "client.Locations.0.Coverages.0.CoverageReference" : "2",
  "client.Locations.0.Coverages.0.GenericFields.1.Number" : "Item Details",
  "client.Locations.0.Coverages.0.GenericFields.1.Key" : "0",
  "client.Locations.0.Coverages.0.GenericFields.1.GenericFieldValueType" : "3",
  "client.Locations.0.Coverages.1.CoverageTypeLookup" : "Buildings occupied as Barber",
  "client.Locations.0.Coverages.0..GenericFields" : "145012"
} ]


/////////////

{
    "divisionLookupID": "AZ_UK",
    "client": {
        "LookupID": "27251",
        "PolicyNumber": "SZ26218858",
        "Name": "alice test new edit EUROSTAMPA UK LIMITED AND UNICORN GRAPHICS LTD AND GILMOUR & DEAN LTD",
        "Address": {
            "Country": "GB" /*Compulsory*/
        },
        "Agent": {
            "AgencyCode": "96686",
            "AgencyName": "D2 Corporate Solutions Ltd",
            "AgentCode": "19747",
            "Address": {/*Compulsory*/},
            "AgentType": "Broker"
        },
        "Locations": [
            {
                "LookupID": "38823",
                "PolicyNumber": "SZ26218858",
                "Address": {
                    "Country": "GB",
                    "Street1": "test 24 CLYDEHOLM ROAD",
                    "Street2": "",
                    "City": "GLASGOW",
                    "Region1": "",
                    "ZipCode": "G14 0QQ"
                },
                "RenewalDate": "2023-03-28T15:08:58.8820749+01:00",
                "Coverages": [
                    {
                        "CoverageTypeLookup": "PD_TIV",
                        "CoverageReference":"Coverage 1",
                        "GenericFields": [
                            {
                                "Number": "8124000",
                                "Key": "01. PD Building",
                                "GenericFieldValueType": 1
                            },
                            {
                                "Number": "20713528",
                                "Key": "02. PD Content",
                                "GenericFieldValueType": 1
                            },
                            {
                                "Number": "3500000",
                                "Key": "03. Stock & Supply",
                                "GenericFieldValueType": 1
                            },
                            {
                                "Number": "0",
                                "Key": "04. PD Other",
                                "GenericFieldValueType": 1
                            },
                            {
                                "Text": "",
                                "Key": "05. PD Other Description",
                                "GenericFieldValueType": 0
                            },
                            {    /*This field is the sum of 1,2,3,4*/
                                "Number": "32337528",
                                "Key": "06. TIV PD",
                                "GenericFieldValueType": 1
                            },
                            {    /*Sum of all values in Global Business Section*/
                                "Number": "29000000",
                                "Key": "07. TIV BI",
                                "GenericFieldValueType": 1
                            },
                            {
                                "Number": "12",
                                "Key": "08. BI Base Period (Months)",
                                "GenericFieldValueType": 1
                            },
                            {    /*This field is the sum of 6,7*/
                                "Number": "61337528",
                                "Key": "09. TIV (PD + BI )",
                                "GenericFieldValueType": 1
                            }
                        ]
                    },
                    {
                        "CoverageTypeLookup": "PD_TIV",
                        "CoverageReference":"Coverage 2",
                        "GenericFields": [
                            {
                                "Number": "18124000",
                                "Key": "01. PD Building",
                                "GenericFieldValueType": 1
                            },
                            {
                                "Number": "120713528",
                                "Key": "02. PD Content",
                                "GenericFieldValueType": 1
                            },
                            {
                                "Number": "13500000",
                                "Key": "03. Stock & Supply",
                                "GenericFieldValueType": 1
                            },
                            {
                                "Number": "0",
                                "Key": "04. PD Other",
                                "GenericFieldValueType": 1
                            },
                            {
                                "Text": "",
                                "Key": "05. PD Other Description",
                                "GenericFieldValueType": 0
                            },
                            {    /*This field is the sum of 1,2,3,4*/
                                "Number": "132337528",
                                "Key": "06. TIV PD",
                                "GenericFieldValueType": 1
                            },
                            {    /*Sum of all values in Global Business Section*/
                                "Number": "129000000",
                                "Key": "07. TIV BI",
                                "GenericFieldValueType": 1
                            },
                            {
                                "Number": "12",
                                "Key": "08. BI Base Period (Months)",
                                "GenericFieldValueType": 1
                            },
                            {    /*This field is the sum of 6,7*/
                                "Number": "161337528",
                                "Key": "09. TIV (PD + BI )",
                                "GenericFieldValueType": 1
                            }
                        ]
                    }
                ]
            }
        ]
    }
}
